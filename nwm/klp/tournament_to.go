// Code generated by Thrift Compiler (0.19.0). DO NOT EDIT.

package klp

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString


const (
  MessageType_kAnsTournamentLogic MessageType = 1
  MessageType_kAnsTnmtRoomInfo MessageType = 2
  MessageType_kAnsLeaveTnmt MessageType = 3
)

func (p MessageType) String() string {
  switch p {
  case MessageType_kAnsTournamentLogic: return "kAnsTournamentLogic"
  case MessageType_kAnsTnmtRoomInfo: return "kAnsTnmtRoomInfo"
  case MessageType_kAnsLeaveTnmt: return "kAnsLeaveTnmt"
  }
  return "<UNSET>"
}

func MessageTypeFromString(s string) (MessageType, error) {
  switch s {
  case "kAnsTournamentLogic": return MessageType_kAnsTournamentLogic, nil 
  case "kAnsTnmtRoomInfo": return MessageType_kAnsTnmtRoomInfo, nil 
  case "kAnsLeaveTnmt": return MessageType_kAnsLeaveTnmt, nil 
  }
  return MessageType(0), fmt.Errorf("not a valid MessageType string")
}


func MessageTypePtr(v MessageType) *MessageType { return &v }

func (p MessageType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *MessageType) UnmarshalText(text []byte) error {
q, err := MessageTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *MessageType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = MessageType(v)
return nil
}

func (p * MessageType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Result_
//  - RequestKey
//  - Ssn
//  - RoomID
//  - Command
//  - ResponseData
//  - TraceID
type AnsTournamentLogic struct {
  Result_ *Error `thrift:"result,1,required" db:"result" json:"result"`
  RequestKey RequestKey `thrift:"request_key,2,required" db:"request_key" json:"request_key"`
  Ssn Ssn `thrift:"ssn,3,required" db:"ssn" json:"ssn"`
  RoomID RoomId `thrift:"room_id,4,required" db:"room_id" json:"room_id"`
  Command Buffer `thrift:"command,5,required" db:"command" json:"command"`
  ResponseData Buffer `thrift:"response_data,6,required" db:"response_data" json:"response_data"`
  TraceID Buffer `thrift:"trace_id,7,required" db:"trace_id" json:"trace_id"`
}

func NewAnsTournamentLogic() *AnsTournamentLogic {
  return &AnsTournamentLogic{}
}

var AnsTournamentLogic_Result__DEFAULT *Error
func (p *AnsTournamentLogic) GetResult_() *Error {
  if !p.IsSetResult_() {
    return AnsTournamentLogic_Result__DEFAULT
  }
return p.Result_
}

func (p *AnsTournamentLogic) GetRequestKey() RequestKey {
  return p.RequestKey
}

func (p *AnsTournamentLogic) GetSsn() Ssn {
  return p.Ssn
}

func (p *AnsTournamentLogic) GetRoomID() RoomId {
  return p.RoomID
}

func (p *AnsTournamentLogic) GetCommand() Buffer {
  return p.Command
}

func (p *AnsTournamentLogic) GetResponseData() Buffer {
  return p.ResponseData
}

func (p *AnsTournamentLogic) GetTraceID() Buffer {
  return p.TraceID
}
func (p *AnsTournamentLogic) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *AnsTournamentLogic) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;
  var issetRequestKey bool = false;
  var issetSsn bool = false;
  var issetRoomID bool = false;
  var issetCommand bool = false;
  var issetResponseData bool = false;
  var issetTraceID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetSsn = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetRoomID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetCommand = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
        issetResponseData = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
        issetTraceID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetSsn{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ssn is not set"));
  }
  if !issetRoomID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomID is not set"));
  }
  if !issetCommand{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Command is not set"));
  }
  if !issetResponseData{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ResponseData is not set"));
  }
  if !issetTraceID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TraceID is not set"));
  }
  return nil
}

func (p *AnsTournamentLogic)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &Error{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *AnsTournamentLogic)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := RequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *AnsTournamentLogic)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Ssn(v)
  p.Ssn = temp
}
  return nil
}

func (p *AnsTournamentLogic)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := RoomId(v)
  p.RoomID = temp
}
  return nil
}

func (p *AnsTournamentLogic)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := Buffer(v)
  p.Command = temp
}
  return nil
}

func (p *AnsTournamentLogic)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := Buffer(v)
  p.ResponseData = temp
}
  return nil
}

func (p *AnsTournamentLogic)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := Buffer(v)
  p.TraceID = temp
}
  return nil
}

func (p *AnsTournamentLogic) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AnsTournamentLogic"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnsTournamentLogic) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *AnsTournamentLogic) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:request_key: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:request_key: ", p), err) }
  return err
}

func (p *AnsTournamentLogic) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ssn", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ssn: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Ssn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ssn (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ssn: ", p), err) }
  return err
}

func (p *AnsTournamentLogic) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "room_id", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:room_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RoomID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.room_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:room_id: ", p), err) }
  return err
}

func (p *AnsTournamentLogic) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "command", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:command: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Command); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.command (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:command: ", p), err) }
  return err
}

func (p *AnsTournamentLogic) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "response_data", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:response_data: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ResponseData); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.response_data (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:response_data: ", p), err) }
  return err
}

func (p *AnsTournamentLogic) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "trace_id", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:trace_id: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.TraceID); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trace_id (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:trace_id: ", p), err) }
  return err
}

func (p *AnsTournamentLogic) Equals(other *AnsTournamentLogic) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Result_.Equals(other.Result_) { return false }
  if p.RequestKey != other.RequestKey { return false }
  if p.Ssn != other.Ssn { return false }
  if p.RoomID != other.RoomID { return false }
  if bytes.Compare(p.Command, other.Command) != 0 { return false }
  if bytes.Compare(p.ResponseData, other.ResponseData) != 0 { return false }
  if bytes.Compare(p.TraceID, other.TraceID) != 0 { return false }
  return true
}

func (p *AnsTournamentLogic) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AnsTournamentLogic(%+v)", *p)
}

func (p *AnsTournamentLogic) Validate() error {
  return nil
}
// Attributes:
//  - Result_
//  - RequestKey
//  - Ssn
//  - CategoryID
//  - TnmtSrl
//  - Gsn
//  - State
//  - RoomLocation
//  - ContentsErrorCode
//  - TraceID
type AnsTnmtRoomInfo struct {
  Result_ *Error `thrift:"result,1,required" db:"result" json:"result"`
  RequestKey RequestKey `thrift:"request_key,2,required" db:"request_key" json:"request_key"`
  Ssn Ssn `thrift:"ssn,3,required" db:"ssn" json:"ssn"`
  CategoryID CategoryId `thrift:"category_id,4,required" db:"category_id" json:"category_id"`
  TnmtSrl TnmtSrl `thrift:"tnmt_srl,5,required" db:"tnmt_srl" json:"tnmt_srl"`
  Gsn Gsn `thrift:"gsn,6,required" db:"gsn" json:"gsn"`
  State TnmtUserState `thrift:"state,7,required" db:"state" json:"state"`
  RoomLocation *RoomLocation `thrift:"room_location,8,required" db:"room_location" json:"room_location"`
  ContentsErrorCode int32 `thrift:"contents_error_code,9,required" db:"contents_error_code" json:"contents_error_code"`
  TraceID Buffer `thrift:"trace_id,10,required" db:"trace_id" json:"trace_id"`
}

func NewAnsTnmtRoomInfo() *AnsTnmtRoomInfo {
  return &AnsTnmtRoomInfo{}
}

var AnsTnmtRoomInfo_Result__DEFAULT *Error
func (p *AnsTnmtRoomInfo) GetResult_() *Error {
  if !p.IsSetResult_() {
    return AnsTnmtRoomInfo_Result__DEFAULT
  }
return p.Result_
}

func (p *AnsTnmtRoomInfo) GetRequestKey() RequestKey {
  return p.RequestKey
}

func (p *AnsTnmtRoomInfo) GetSsn() Ssn {
  return p.Ssn
}

func (p *AnsTnmtRoomInfo) GetCategoryID() CategoryId {
  return p.CategoryID
}

func (p *AnsTnmtRoomInfo) GetTnmtSrl() TnmtSrl {
  return p.TnmtSrl
}

func (p *AnsTnmtRoomInfo) GetGsn() Gsn {
  return p.Gsn
}

func (p *AnsTnmtRoomInfo) GetState() TnmtUserState {
  return p.State
}
var AnsTnmtRoomInfo_RoomLocation_DEFAULT *RoomLocation
func (p *AnsTnmtRoomInfo) GetRoomLocation() *RoomLocation {
  if !p.IsSetRoomLocation() {
    return AnsTnmtRoomInfo_RoomLocation_DEFAULT
  }
return p.RoomLocation
}

func (p *AnsTnmtRoomInfo) GetContentsErrorCode() int32 {
  return p.ContentsErrorCode
}

func (p *AnsTnmtRoomInfo) GetTraceID() Buffer {
  return p.TraceID
}
func (p *AnsTnmtRoomInfo) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *AnsTnmtRoomInfo) IsSetRoomLocation() bool {
  return p.RoomLocation != nil
}

func (p *AnsTnmtRoomInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;
  var issetRequestKey bool = false;
  var issetSsn bool = false;
  var issetCategoryID bool = false;
  var issetTnmtSrl bool = false;
  var issetGsn bool = false;
  var issetState bool = false;
  var issetRoomLocation bool = false;
  var issetContentsErrorCode bool = false;
  var issetTraceID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetSsn = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetCategoryID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetTnmtSrl = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
        issetGsn = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
        issetState = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
        issetRoomLocation = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
        issetContentsErrorCode = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
        issetTraceID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetSsn{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ssn is not set"));
  }
  if !issetCategoryID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CategoryID is not set"));
  }
  if !issetTnmtSrl{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TnmtSrl is not set"));
  }
  if !issetGsn{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Gsn is not set"));
  }
  if !issetState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field State is not set"));
  }
  if !issetRoomLocation{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomLocation is not set"));
  }
  if !issetContentsErrorCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ContentsErrorCode is not set"));
  }
  if !issetTraceID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TraceID is not set"));
  }
  return nil
}

func (p *AnsTnmtRoomInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &Error{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *AnsTnmtRoomInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := RequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *AnsTnmtRoomInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Ssn(v)
  p.Ssn = temp
}
  return nil
}

func (p *AnsTnmtRoomInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := CategoryId(v)
  p.CategoryID = temp
}
  return nil
}

func (p *AnsTnmtRoomInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := TnmtSrl(v)
  p.TnmtSrl = temp
}
  return nil
}

func (p *AnsTnmtRoomInfo)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := Gsn(v)
  p.Gsn = temp
}
  return nil
}

func (p *AnsTnmtRoomInfo)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := TnmtUserState(v)
  p.State = temp
}
  return nil
}

func (p *AnsTnmtRoomInfo)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  p.RoomLocation = &RoomLocation{}
  if err := p.RoomLocation.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RoomLocation), err)
  }
  return nil
}

func (p *AnsTnmtRoomInfo)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.ContentsErrorCode = v
}
  return nil
}

func (p *AnsTnmtRoomInfo)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := Buffer(v)
  p.TraceID = temp
}
  return nil
}

func (p *AnsTnmtRoomInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AnsTnmtRoomInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnsTnmtRoomInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *AnsTnmtRoomInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:request_key: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:request_key: ", p), err) }
  return err
}

func (p *AnsTnmtRoomInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ssn", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ssn: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Ssn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ssn (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ssn: ", p), err) }
  return err
}

func (p *AnsTnmtRoomInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "category_id", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:category_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CategoryID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.category_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:category_id: ", p), err) }
  return err
}

func (p *AnsTnmtRoomInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tnmt_srl", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tnmt_srl: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TnmtSrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tnmt_srl (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tnmt_srl: ", p), err) }
  return err
}

func (p *AnsTnmtRoomInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "gsn", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:gsn: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Gsn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gsn (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:gsn: ", p), err) }
  return err
}

func (p *AnsTnmtRoomInfo) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "state", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:state: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:state: ", p), err) }
  return err
}

func (p *AnsTnmtRoomInfo) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "room_location", thrift.STRUCT, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:room_location: ", p), err) }
  if err := p.RoomLocation.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RoomLocation), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:room_location: ", p), err) }
  return err
}

func (p *AnsTnmtRoomInfo) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contents_error_code", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:contents_error_code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ContentsErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contents_error_code (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:contents_error_code: ", p), err) }
  return err
}

func (p *AnsTnmtRoomInfo) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "trace_id", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:trace_id: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.TraceID); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trace_id (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:trace_id: ", p), err) }
  return err
}

func (p *AnsTnmtRoomInfo) Equals(other *AnsTnmtRoomInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Result_.Equals(other.Result_) { return false }
  if p.RequestKey != other.RequestKey { return false }
  if p.Ssn != other.Ssn { return false }
  if p.CategoryID != other.CategoryID { return false }
  if p.TnmtSrl != other.TnmtSrl { return false }
  if p.Gsn != other.Gsn { return false }
  if p.State != other.State { return false }
  if !p.RoomLocation.Equals(other.RoomLocation) { return false }
  if p.ContentsErrorCode != other.ContentsErrorCode { return false }
  if bytes.Compare(p.TraceID, other.TraceID) != 0 { return false }
  return true
}

func (p *AnsTnmtRoomInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AnsTnmtRoomInfo(%+v)", *p)
}

func (p *AnsTnmtRoomInfo) Validate() error {
  return nil
}
// Attributes:
//  - Result_
//  - RequestKey
//  - Ssn
//  - CategoryID
//  - TnmtSrl
//  - Gsn
//  - State
//  - ContentsData
//  - TraceID
type AnsLeaveTnmt struct {
  Result_ *Error `thrift:"result,1,required" db:"result" json:"result"`
  RequestKey RequestKey `thrift:"request_key,2,required" db:"request_key" json:"request_key"`
  Ssn Ssn `thrift:"ssn,3,required" db:"ssn" json:"ssn"`
  CategoryID CategoryId `thrift:"category_id,4,required" db:"category_id" json:"category_id"`
  TnmtSrl TnmtSrl `thrift:"tnmt_srl,5,required" db:"tnmt_srl" json:"tnmt_srl"`
  Gsn Gsn `thrift:"gsn,6,required" db:"gsn" json:"gsn"`
  State TnmtUserState `thrift:"state,7,required" db:"state" json:"state"`
  ContentsData Buffer `thrift:"contents_data,8,required" db:"contents_data" json:"contents_data"`
  TraceID Buffer `thrift:"trace_id,9,required" db:"trace_id" json:"trace_id"`
}

func NewAnsLeaveTnmt() *AnsLeaveTnmt {
  return &AnsLeaveTnmt{}
}

var AnsLeaveTnmt_Result__DEFAULT *Error
func (p *AnsLeaveTnmt) GetResult_() *Error {
  if !p.IsSetResult_() {
    return AnsLeaveTnmt_Result__DEFAULT
  }
return p.Result_
}

func (p *AnsLeaveTnmt) GetRequestKey() RequestKey {
  return p.RequestKey
}

func (p *AnsLeaveTnmt) GetSsn() Ssn {
  return p.Ssn
}

func (p *AnsLeaveTnmt) GetCategoryID() CategoryId {
  return p.CategoryID
}

func (p *AnsLeaveTnmt) GetTnmtSrl() TnmtSrl {
  return p.TnmtSrl
}

func (p *AnsLeaveTnmt) GetGsn() Gsn {
  return p.Gsn
}

func (p *AnsLeaveTnmt) GetState() TnmtUserState {
  return p.State
}

func (p *AnsLeaveTnmt) GetContentsData() Buffer {
  return p.ContentsData
}

func (p *AnsLeaveTnmt) GetTraceID() Buffer {
  return p.TraceID
}
func (p *AnsLeaveTnmt) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *AnsLeaveTnmt) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;
  var issetRequestKey bool = false;
  var issetSsn bool = false;
  var issetCategoryID bool = false;
  var issetTnmtSrl bool = false;
  var issetGsn bool = false;
  var issetState bool = false;
  var issetContentsData bool = false;
  var issetTraceID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetSsn = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetCategoryID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetTnmtSrl = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
        issetGsn = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
        issetState = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
        issetContentsData = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
        issetTraceID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetSsn{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ssn is not set"));
  }
  if !issetCategoryID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CategoryID is not set"));
  }
  if !issetTnmtSrl{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TnmtSrl is not set"));
  }
  if !issetGsn{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Gsn is not set"));
  }
  if !issetState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field State is not set"));
  }
  if !issetContentsData{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ContentsData is not set"));
  }
  if !issetTraceID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TraceID is not set"));
  }
  return nil
}

func (p *AnsLeaveTnmt)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &Error{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *AnsLeaveTnmt)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := RequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *AnsLeaveTnmt)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Ssn(v)
  p.Ssn = temp
}
  return nil
}

func (p *AnsLeaveTnmt)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := CategoryId(v)
  p.CategoryID = temp
}
  return nil
}

func (p *AnsLeaveTnmt)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := TnmtSrl(v)
  p.TnmtSrl = temp
}
  return nil
}

func (p *AnsLeaveTnmt)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := Gsn(v)
  p.Gsn = temp
}
  return nil
}

func (p *AnsLeaveTnmt)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := TnmtUserState(v)
  p.State = temp
}
  return nil
}

func (p *AnsLeaveTnmt)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := Buffer(v)
  p.ContentsData = temp
}
  return nil
}

func (p *AnsLeaveTnmt)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  temp := Buffer(v)
  p.TraceID = temp
}
  return nil
}

func (p *AnsLeaveTnmt) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AnsLeaveTnmt"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnsLeaveTnmt) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *AnsLeaveTnmt) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:request_key: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:request_key: ", p), err) }
  return err
}

func (p *AnsLeaveTnmt) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ssn", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ssn: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Ssn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ssn (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ssn: ", p), err) }
  return err
}

func (p *AnsLeaveTnmt) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "category_id", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:category_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CategoryID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.category_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:category_id: ", p), err) }
  return err
}

func (p *AnsLeaveTnmt) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tnmt_srl", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tnmt_srl: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TnmtSrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tnmt_srl (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tnmt_srl: ", p), err) }
  return err
}

func (p *AnsLeaveTnmt) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "gsn", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:gsn: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Gsn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gsn (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:gsn: ", p), err) }
  return err
}

func (p *AnsLeaveTnmt) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "state", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:state: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:state: ", p), err) }
  return err
}

func (p *AnsLeaveTnmt) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contents_data", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:contents_data: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ContentsData); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contents_data (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:contents_data: ", p), err) }
  return err
}

func (p *AnsLeaveTnmt) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "trace_id", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:trace_id: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.TraceID); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trace_id (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:trace_id: ", p), err) }
  return err
}

func (p *AnsLeaveTnmt) Equals(other *AnsLeaveTnmt) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Result_.Equals(other.Result_) { return false }
  if p.RequestKey != other.RequestKey { return false }
  if p.Ssn != other.Ssn { return false }
  if p.CategoryID != other.CategoryID { return false }
  if p.TnmtSrl != other.TnmtSrl { return false }
  if p.Gsn != other.Gsn { return false }
  if p.State != other.State { return false }
  if bytes.Compare(p.ContentsData, other.ContentsData) != 0 { return false }
  if bytes.Compare(p.TraceID, other.TraceID) != 0 { return false }
  return true
}

func (p *AnsLeaveTnmt) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AnsLeaveTnmt(%+v)", *p)
}

func (p *AnsLeaveTnmt) Validate() error {
  return nil
}
