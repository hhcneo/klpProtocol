// Code generated by Thrift Compiler (0.19.0). DO NOT EDIT.

package to_web_gateway

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
	"nwm/klp/protocol"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

var _ = protocol.GoUnusedProtection__
type MessageType int64
const (
  MessageType_kReqPmangBusinessLogic MessageType = 1
  MessageType_kForwardMessage MessageType = 2
)

func (p MessageType) String() string {
  switch p {
  case MessageType_kReqPmangBusinessLogic: return "kReqPmangBusinessLogic"
  case MessageType_kForwardMessage: return "kForwardMessage"
  }
  return "<UNSET>"
}

func MessageTypeFromString(s string) (MessageType, error) {
  switch s {
  case "kReqPmangBusinessLogic": return MessageType_kReqPmangBusinessLogic, nil 
  case "kForwardMessage": return MessageType_kForwardMessage, nil 
  }
  return MessageType(0), fmt.Errorf("not a valid MessageType string")
}


func MessageTypePtr(v MessageType) *MessageType { return &v }

func (p MessageType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *MessageType) UnmarshalText(text []byte) error {
q, err := MessageTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *MessageType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = MessageType(v)
return nil
}

func (p * MessageType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - RequestKey
//  - Ssn
//  - Gsn
//  - UserState
//  - URL
//  - BusinessContentsMessage
//  - SessionInfo
//  - Compress
type ReqPmangBusinessLogic struct {
  RequestKey protocol.RequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  Ssn protocol.Ssn `thrift:"ssn,2,required" db:"ssn" json:"ssn"`
  Gsn protocol.Gsn `thrift:"gsn,3,required" db:"gsn" json:"gsn"`
  UserState protocol.UserState `thrift:"user_state,4,required" db:"user_state" json:"user_state"`
  URL string `thrift:"url,5,required" db:"url" json:"url"`
  BusinessContentsMessage protocol.Buffer `thrift:"business_contents_message,6,required" db:"business_contents_message" json:"business_contents_message"`
  SessionInfo protocol.Buffer `thrift:"session_info,7,required" db:"session_info" json:"session_info"`
  Compress *bool `thrift:"compress,8" db:"compress" json:"compress,omitempty"`
}

func NewReqPmangBusinessLogic() *ReqPmangBusinessLogic {
  return &ReqPmangBusinessLogic{}
}


func (p *ReqPmangBusinessLogic) GetRequestKey() protocol.RequestKey {
  return p.RequestKey
}

func (p *ReqPmangBusinessLogic) GetSsn() protocol.Ssn {
  return p.Ssn
}

func (p *ReqPmangBusinessLogic) GetGsn() protocol.Gsn {
  return p.Gsn
}

func (p *ReqPmangBusinessLogic) GetUserState() protocol.UserState {
  return p.UserState
}

func (p *ReqPmangBusinessLogic) GetURL() string {
  return p.URL
}

func (p *ReqPmangBusinessLogic) GetBusinessContentsMessage() protocol.Buffer {
  return p.BusinessContentsMessage
}

func (p *ReqPmangBusinessLogic) GetSessionInfo() protocol.Buffer {
  return p.SessionInfo
}
var ReqPmangBusinessLogic_Compress_DEFAULT bool
func (p *ReqPmangBusinessLogic) GetCompress() bool {
  if !p.IsSetCompress() {
    return ReqPmangBusinessLogic_Compress_DEFAULT
  }
return *p.Compress
}
func (p *ReqPmangBusinessLogic) IsSetCompress() bool {
  return p.Compress != nil
}

func (p *ReqPmangBusinessLogic) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetSsn bool = false;
  var issetGsn bool = false;
  var issetUserState bool = false;
  var issetURL bool = false;
  var issetBusinessContentsMessage bool = false;
  var issetSessionInfo bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetSsn = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetGsn = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetUserState = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetURL = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
        issetBusinessContentsMessage = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
        issetSessionInfo = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetSsn{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ssn is not set"));
  }
  if !issetGsn{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Gsn is not set"));
  }
  if !issetUserState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserState is not set"));
  }
  if !issetURL{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field URL is not set"));
  }
  if !issetBusinessContentsMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BusinessContentsMessage is not set"));
  }
  if !issetSessionInfo{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionInfo is not set"));
  }
  return nil
}

func (p *ReqPmangBusinessLogic)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.RequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *ReqPmangBusinessLogic)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := protocol.Ssn(v)
  p.Ssn = temp
}
  return nil
}

func (p *ReqPmangBusinessLogic)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := protocol.Gsn(v)
  p.Gsn = temp
}
  return nil
}

func (p *ReqPmangBusinessLogic)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := protocol.UserState(v)
  p.UserState = temp
}
  return nil
}

func (p *ReqPmangBusinessLogic)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.URL = v
}
  return nil
}

func (p *ReqPmangBusinessLogic)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := protocol.Buffer(v)
  p.BusinessContentsMessage = temp
}
  return nil
}

func (p *ReqPmangBusinessLogic)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := protocol.Buffer(v)
  p.SessionInfo = temp
}
  return nil
}

func (p *ReqPmangBusinessLogic)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Compress = &v
}
  return nil
}

func (p *ReqPmangBusinessLogic) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReqPmangBusinessLogic"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReqPmangBusinessLogic) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *ReqPmangBusinessLogic) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ssn", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ssn: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Ssn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ssn (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ssn: ", p), err) }
  return err
}

func (p *ReqPmangBusinessLogic) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "gsn", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gsn: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Gsn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gsn (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gsn: ", p), err) }
  return err
}

func (p *ReqPmangBusinessLogic) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_state", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:user_state: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.UserState)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_state (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:user_state: ", p), err) }
  return err
}

func (p *ReqPmangBusinessLogic) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "url", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:url: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.URL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.url (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:url: ", p), err) }
  return err
}

func (p *ReqPmangBusinessLogic) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "business_contents_message", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:business_contents_message: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.BusinessContentsMessage); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.business_contents_message (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:business_contents_message: ", p), err) }
  return err
}

func (p *ReqPmangBusinessLogic) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "session_info", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:session_info: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.SessionInfo); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session_info (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:session_info: ", p), err) }
  return err
}

func (p *ReqPmangBusinessLogic) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCompress() {
    if err := oprot.WriteFieldBegin(ctx, "compress", thrift.BOOL, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:compress: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Compress)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.compress (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:compress: ", p), err) }
  }
  return err
}

func (p *ReqPmangBusinessLogic) Equals(other *ReqPmangBusinessLogic) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if p.Ssn != other.Ssn { return false }
  if p.Gsn != other.Gsn { return false }
  if p.UserState != other.UserState { return false }
  if p.URL != other.URL { return false }
  if bytes.Compare(p.BusinessContentsMessage, other.BusinessContentsMessage) != 0 { return false }
  if bytes.Compare(p.SessionInfo, other.SessionInfo) != 0 { return false }
  if p.Compress != other.Compress {
    if p.Compress == nil || other.Compress == nil {
      return false
    }
    if (*p.Compress) != (*other.Compress) { return false }
  }
  return true
}

func (p *ReqPmangBusinessLogic) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReqPmangBusinessLogic(%+v)", *p)
}

func (p *ReqPmangBusinessLogic) Validate() error {
  return nil
}
// Attributes:
//  - Ssn
//  - Gsn
//  - EnvelopedMessage
//  - SessionInfo
type ForwardMessage struct {
  Ssn protocol.Ssn `thrift:"ssn,1,required" db:"ssn" json:"ssn"`
  Gsn protocol.Gsn `thrift:"gsn,2,required" db:"gsn" json:"gsn"`
  EnvelopedMessage protocol.KlpProtocolBuffer `thrift:"enveloped_message,3,required" db:"enveloped_message" json:"enveloped_message"`
  SessionInfo protocol.Buffer `thrift:"session_info,4,required" db:"session_info" json:"session_info"`
}

func NewForwardMessage() *ForwardMessage {
  return &ForwardMessage{}
}


func (p *ForwardMessage) GetSsn() protocol.Ssn {
  return p.Ssn
}

func (p *ForwardMessage) GetGsn() protocol.Gsn {
  return p.Gsn
}

func (p *ForwardMessage) GetEnvelopedMessage() protocol.KlpProtocolBuffer {
  return p.EnvelopedMessage
}

func (p *ForwardMessage) GetSessionInfo() protocol.Buffer {
  return p.SessionInfo
}
func (p *ForwardMessage) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetSsn bool = false;
  var issetGsn bool = false;
  var issetEnvelopedMessage bool = false;
  var issetSessionInfo bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetSsn = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetGsn = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetEnvelopedMessage = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetSessionInfo = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetSsn{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ssn is not set"));
  }
  if !issetGsn{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Gsn is not set"));
  }
  if !issetEnvelopedMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EnvelopedMessage is not set"));
  }
  if !issetSessionInfo{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionInfo is not set"));
  }
  return nil
}

func (p *ForwardMessage)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.Ssn(v)
  p.Ssn = temp
}
  return nil
}

func (p *ForwardMessage)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := protocol.Gsn(v)
  p.Gsn = temp
}
  return nil
}

func (p *ForwardMessage)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := protocol.KlpProtocolBuffer(v)
  p.EnvelopedMessage = temp
}
  return nil
}

func (p *ForwardMessage)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := protocol.Buffer(v)
  p.SessionInfo = temp
}
  return nil
}

func (p *ForwardMessage) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ForwardMessage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ForwardMessage) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ssn", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ssn: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Ssn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ssn (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ssn: ", p), err) }
  return err
}

func (p *ForwardMessage) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "gsn", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gsn: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Gsn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gsn (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gsn: ", p), err) }
  return err
}

func (p *ForwardMessage) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "enveloped_message", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:enveloped_message: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.EnvelopedMessage); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enveloped_message (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:enveloped_message: ", p), err) }
  return err
}

func (p *ForwardMessage) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "session_info", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:session_info: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.SessionInfo); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session_info (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:session_info: ", p), err) }
  return err
}

func (p *ForwardMessage) Equals(other *ForwardMessage) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Ssn != other.Ssn { return false }
  if p.Gsn != other.Gsn { return false }
  if bytes.Compare(p.EnvelopedMessage, other.EnvelopedMessage) != 0 { return false }
  if bytes.Compare(p.SessionInfo, other.SessionInfo) != 0 { return false }
  return true
}

func (p *ForwardMessage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ForwardMessage(%+v)", *p)
}

func (p *ForwardMessage) Validate() error {
  return nil
}
