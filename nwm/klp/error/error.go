// Code generated by Thrift Compiler (0.19.0). DO NOT EDIT.

package error

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

type ErrorCode int64
const (
  ErrorCode_kSuccess ErrorCode = 1
  ErrorCode_kInvalidVersion ErrorCode = 2
  ErrorCode_kUnknown ErrorCode = 3
  ErrorCode_kDuplicated ErrorCode = 4
  ErrorCode_kIncorrectServer ErrorCode = 5
  ErrorCode_kInvalidState ErrorCode = 6
  ErrorCode_kInvalidParameter ErrorCode = 7
  ErrorCode_kPmangWeb ErrorCode = 8
  ErrorCode_kRejectByContents ErrorCode = 9
  ErrorCode_kErrorAuthContents ErrorCode = 10
  ErrorCode_kRejectBySystem ErrorCode = 11
  ErrorCode_kTnmtFullRoom ErrorCode = 12
  ErrorCode_kInternal ErrorCode = 1000
  ErrorCode_kNoExistUser ErrorCode = 1001
  ErrorCode_kErrorInvalidState ErrorCode = 1002
  ErrorCode_kErrorInvalidParam ErrorCode = 1003
  ErrorCode_kParse ErrorCode = 1004
  ErrorCode_kSearchInvalidVersion ErrorCode = 1005
  ErrorCode_kAlreadyExist ErrorCode = 1006
  ErrorCode_kNotExist ErrorCode = 1007
  ErrorCode_kUnkownSsn ErrorCode = 1008
  ErrorCode_kErrorExistInLobby ErrorCode = 1009
  ErrorCode_kErrorNotExistInLobby ErrorCode = 1010
  ErrorCode_kErrorExistInRoom ErrorCode = 1011
)

func (p ErrorCode) String() string {
  switch p {
  case ErrorCode_kSuccess: return "kSuccess"
  case ErrorCode_kInvalidVersion: return "kInvalidVersion"
  case ErrorCode_kUnknown: return "kUnknown"
  case ErrorCode_kDuplicated: return "kDuplicated"
  case ErrorCode_kIncorrectServer: return "kIncorrectServer"
  case ErrorCode_kInvalidState: return "kInvalidState"
  case ErrorCode_kInvalidParameter: return "kInvalidParameter"
  case ErrorCode_kPmangWeb: return "kPmangWeb"
  case ErrorCode_kRejectByContents: return "kRejectByContents"
  case ErrorCode_kErrorAuthContents: return "kErrorAuthContents"
  case ErrorCode_kRejectBySystem: return "kRejectBySystem"
  case ErrorCode_kTnmtFullRoom: return "kTnmtFullRoom"
  case ErrorCode_kInternal: return "kInternal"
  case ErrorCode_kNoExistUser: return "kNoExistUser"
  case ErrorCode_kErrorInvalidState: return "kErrorInvalidState"
  case ErrorCode_kErrorInvalidParam: return "kErrorInvalidParam"
  case ErrorCode_kParse: return "kParse"
  case ErrorCode_kSearchInvalidVersion: return "kSearchInvalidVersion"
  case ErrorCode_kAlreadyExist: return "kAlreadyExist"
  case ErrorCode_kNotExist: return "kNotExist"
  case ErrorCode_kUnkownSsn: return "kUnkownSsn"
  case ErrorCode_kErrorExistInLobby: return "kErrorExistInLobby"
  case ErrorCode_kErrorNotExistInLobby: return "kErrorNotExistInLobby"
  case ErrorCode_kErrorExistInRoom: return "kErrorExistInRoom"
  }
  return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
  switch s {
  case "kSuccess": return ErrorCode_kSuccess, nil 
  case "kInvalidVersion": return ErrorCode_kInvalidVersion, nil 
  case "kUnknown": return ErrorCode_kUnknown, nil 
  case "kDuplicated": return ErrorCode_kDuplicated, nil 
  case "kIncorrectServer": return ErrorCode_kIncorrectServer, nil 
  case "kInvalidState": return ErrorCode_kInvalidState, nil 
  case "kInvalidParameter": return ErrorCode_kInvalidParameter, nil 
  case "kPmangWeb": return ErrorCode_kPmangWeb, nil 
  case "kRejectByContents": return ErrorCode_kRejectByContents, nil 
  case "kErrorAuthContents": return ErrorCode_kErrorAuthContents, nil 
  case "kRejectBySystem": return ErrorCode_kRejectBySystem, nil 
  case "kTnmtFullRoom": return ErrorCode_kTnmtFullRoom, nil 
  case "kInternal": return ErrorCode_kInternal, nil 
  case "kNoExistUser": return ErrorCode_kNoExistUser, nil 
  case "kErrorInvalidState": return ErrorCode_kErrorInvalidState, nil 
  case "kErrorInvalidParam": return ErrorCode_kErrorInvalidParam, nil 
  case "kParse": return ErrorCode_kParse, nil 
  case "kSearchInvalidVersion": return ErrorCode_kSearchInvalidVersion, nil 
  case "kAlreadyExist": return ErrorCode_kAlreadyExist, nil 
  case "kNotExist": return ErrorCode_kNotExist, nil 
  case "kUnkownSsn": return ErrorCode_kUnkownSsn, nil 
  case "kErrorExistInLobby": return ErrorCode_kErrorExistInLobby, nil 
  case "kErrorNotExistInLobby": return ErrorCode_kErrorNotExistInLobby, nil 
  case "kErrorExistInRoom": return ErrorCode_kErrorExistInRoom, nil 
  }
  return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}


func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

func (p ErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ErrorCode) UnmarshalText(text []byte) error {
q, err := ErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ErrorCode(v)
return nil
}

func (p * ErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - ErrorCode
//  - ErrorString
type Error struct {
  ErrorCode ErrorCode `thrift:"error_code,1,required" db:"error_code" json:"error_code"`
  ErrorString string `thrift:"error_string,2,required" db:"error_string" json:"error_string"`
}

func NewError() *Error {
  return &Error{}
}


func (p *Error) GetErrorCode() ErrorCode {
  return p.ErrorCode
}

func (p *Error) GetErrorString() string {
  return p.ErrorString
}
func (p *Error) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrorCode bool = false;
  var issetErrorString bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetErrorCode = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetErrorString = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrorCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"));
  }
  if !issetErrorString{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorString is not set"));
  }
  return nil
}

func (p *Error)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *Error)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrorString = v
}
  return nil
}

func (p *Error) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Error"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Error) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "error_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err) }
  return err
}

func (p *Error) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "error_string", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error_string: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ErrorString)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_string (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error_string: ", p), err) }
  return err
}

func (p *Error) Equals(other *Error) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ErrorCode != other.ErrorCode { return false }
  if p.ErrorString != other.ErrorString { return false }
  return true
}

func (p *Error) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Error(%+v)", *p)
}

func (p *Error) Validate() error {
  return nil
}
