// Code generated by Thrift Compiler (0.19.0). DO NOT EDIT.

package klp

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

type MessageType int64
const (
  MessageType_kAnsSearchRoom MessageType = 1
  MessageType_kAnsRoomInfoList MessageType = 2
  MessageType_kAnsRoomCreateInfo MessageType = 3
  MessageType_kNtfRoomManagerServerStart MessageType = 4
  MessageType_kAnsUserCount MessageType = 5
  MessageType_kAnsRoomList MessageType = 6
  MessageType_kAnsCustomQuery MessageType = 7
)

func (p MessageType) String() string {
  switch p {
  case MessageType_kAnsSearchRoom: return "kAnsSearchRoom"
  case MessageType_kAnsRoomInfoList: return "kAnsRoomInfoList"
  case MessageType_kAnsRoomCreateInfo: return "kAnsRoomCreateInfo"
  case MessageType_kNtfRoomManagerServerStart: return "kNtfRoomManagerServerStart"
  case MessageType_kAnsUserCount: return "kAnsUserCount"
  case MessageType_kAnsRoomList: return "kAnsRoomList"
  case MessageType_kAnsCustomQuery: return "kAnsCustomQuery"
  }
  return "<UNSET>"
}

func MessageTypeFromString(s string) (MessageType, error) {
  switch s {
  case "kAnsSearchRoom": return MessageType_kAnsSearchRoom, nil 
  case "kAnsRoomInfoList": return MessageType_kAnsRoomInfoList, nil 
  case "kAnsRoomCreateInfo": return MessageType_kAnsRoomCreateInfo, nil 
  case "kNtfRoomManagerServerStart": return MessageType_kNtfRoomManagerServerStart, nil 
  case "kAnsUserCount": return MessageType_kAnsUserCount, nil 
  case "kAnsRoomList": return MessageType_kAnsRoomList, nil 
  case "kAnsCustomQuery": return MessageType_kAnsCustomQuery, nil 
  }
  return MessageType(0), fmt.Errorf("not a valid MessageType string")
}


func MessageTypePtr(v MessageType) *MessageType { return &v }

func (p MessageType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *MessageType) UnmarshalText(text []byte) error {
q, err := MessageTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *MessageType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = MessageType(v)
return nil
}

func (p * MessageType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - RequestKey
//  - Result_
//  - Ssn
//  - CategoryID
//  - RoomInfos
//  - TraceID
type AnsSearchRoom struct {
  RequestKey RequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  Result_ *Error `thrift:"result,2,required" db:"result" json:"result"`
  Ssn Ssn `thrift:"ssn,3,required" db:"ssn" json:"ssn"`
  CategoryID CategoryId `thrift:"category_id,4,required" db:"category_id" json:"category_id"`
  RoomInfos []*RoomInfoWithLocation `thrift:"room_infos,5,required" db:"room_infos" json:"room_infos"`
  TraceID Buffer `thrift:"trace_id,6,required" db:"trace_id" json:"trace_id"`
}

func NewAnsSearchRoom() *AnsSearchRoom {
  return &AnsSearchRoom{}
}


func (p *AnsSearchRoom) GetRequestKey() RequestKey {
  return p.RequestKey
}
var AnsSearchRoom_Result__DEFAULT *Error
func (p *AnsSearchRoom) GetResult_() *Error {
  if !p.IsSetResult_() {
    return AnsSearchRoom_Result__DEFAULT
  }
return p.Result_
}

func (p *AnsSearchRoom) GetSsn() Ssn {
  return p.Ssn
}

func (p *AnsSearchRoom) GetCategoryID() CategoryId {
  return p.CategoryID
}

func (p *AnsSearchRoom) GetRoomInfos() []*RoomInfoWithLocation {
  return p.RoomInfos
}

func (p *AnsSearchRoom) GetTraceID() Buffer {
  return p.TraceID
}
func (p *AnsSearchRoom) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *AnsSearchRoom) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetResult_ bool = false;
  var issetSsn bool = false;
  var issetCategoryID bool = false;
  var issetRoomInfos bool = false;
  var issetTraceID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetSsn = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetCategoryID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetRoomInfos = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
        issetTraceID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  if !issetSsn{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ssn is not set"));
  }
  if !issetCategoryID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CategoryID is not set"));
  }
  if !issetRoomInfos{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomInfos is not set"));
  }
  if !issetTraceID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TraceID is not set"));
  }
  return nil
}

func (p *AnsSearchRoom)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := RequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *AnsSearchRoom)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &Error{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *AnsSearchRoom)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Ssn(v)
  p.Ssn = temp
}
  return nil
}

func (p *AnsSearchRoom)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := CategoryId(v)
  p.CategoryID = temp
}
  return nil
}

func (p *AnsSearchRoom)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*RoomInfoWithLocation, 0, size)
  p.RoomInfos =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &RoomInfoWithLocation{}
    if err := _elem0.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.RoomInfos = append(p.RoomInfos, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AnsSearchRoom)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := Buffer(v)
  p.TraceID = temp
}
  return nil
}

func (p *AnsSearchRoom) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AnsSearchRoom"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnsSearchRoom) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *AnsSearchRoom) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:result: ", p), err) }
  return err
}

func (p *AnsSearchRoom) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ssn", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ssn: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Ssn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ssn (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ssn: ", p), err) }
  return err
}

func (p *AnsSearchRoom) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "category_id", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:category_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CategoryID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.category_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:category_id: ", p), err) }
  return err
}

func (p *AnsSearchRoom) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "room_infos", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:room_infos: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.RoomInfos)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RoomInfos {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:room_infos: ", p), err) }
  return err
}

func (p *AnsSearchRoom) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "trace_id", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:trace_id: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.TraceID); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trace_id (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:trace_id: ", p), err) }
  return err
}

func (p *AnsSearchRoom) Equals(other *AnsSearchRoom) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if !p.Result_.Equals(other.Result_) { return false }
  if p.Ssn != other.Ssn { return false }
  if p.CategoryID != other.CategoryID { return false }
  if len(p.RoomInfos) != len(other.RoomInfos) { return false }
  for i, _tgt := range p.RoomInfos {
    _src1 := other.RoomInfos[i]
    if !_tgt.Equals(_src1) { return false }
  }
  if bytes.Compare(p.TraceID, other.TraceID) != 0 { return false }
  return true
}

func (p *AnsSearchRoom) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AnsSearchRoom(%+v)", *p)
}

func (p *AnsSearchRoom) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - Result_
//  - Ssn
//  - RoomInfos
//  - TraceID
type AnsRoomInfoList struct {
  RequestKey RequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  Result_ *Error `thrift:"result,2,required" db:"result" json:"result"`
  Ssn Ssn `thrift:"ssn,3,required" db:"ssn" json:"ssn"`
  RoomInfos []*RoomInfoWithLocation `thrift:"room_infos,4,required" db:"room_infos" json:"room_infos"`
  TraceID Buffer `thrift:"trace_id,5,required" db:"trace_id" json:"trace_id"`
}

func NewAnsRoomInfoList() *AnsRoomInfoList {
  return &AnsRoomInfoList{}
}


func (p *AnsRoomInfoList) GetRequestKey() RequestKey {
  return p.RequestKey
}
var AnsRoomInfoList_Result__DEFAULT *Error
func (p *AnsRoomInfoList) GetResult_() *Error {
  if !p.IsSetResult_() {
    return AnsRoomInfoList_Result__DEFAULT
  }
return p.Result_
}

func (p *AnsRoomInfoList) GetSsn() Ssn {
  return p.Ssn
}

func (p *AnsRoomInfoList) GetRoomInfos() []*RoomInfoWithLocation {
  return p.RoomInfos
}

func (p *AnsRoomInfoList) GetTraceID() Buffer {
  return p.TraceID
}
func (p *AnsRoomInfoList) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *AnsRoomInfoList) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetResult_ bool = false;
  var issetSsn bool = false;
  var issetRoomInfos bool = false;
  var issetTraceID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetSsn = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetRoomInfos = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetTraceID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  if !issetSsn{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ssn is not set"));
  }
  if !issetRoomInfos{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomInfos is not set"));
  }
  if !issetTraceID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TraceID is not set"));
  }
  return nil
}

func (p *AnsRoomInfoList)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := RequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *AnsRoomInfoList)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &Error{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *AnsRoomInfoList)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Ssn(v)
  p.Ssn = temp
}
  return nil
}

func (p *AnsRoomInfoList)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*RoomInfoWithLocation, 0, size)
  p.RoomInfos =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &RoomInfoWithLocation{}
    if err := _elem2.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.RoomInfos = append(p.RoomInfos, _elem2)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AnsRoomInfoList)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := Buffer(v)
  p.TraceID = temp
}
  return nil
}

func (p *AnsRoomInfoList) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AnsRoomInfoList"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnsRoomInfoList) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *AnsRoomInfoList) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:result: ", p), err) }
  return err
}

func (p *AnsRoomInfoList) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ssn", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ssn: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Ssn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ssn (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ssn: ", p), err) }
  return err
}

func (p *AnsRoomInfoList) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "room_infos", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:room_infos: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.RoomInfos)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RoomInfos {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:room_infos: ", p), err) }
  return err
}

func (p *AnsRoomInfoList) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "trace_id", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:trace_id: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.TraceID); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trace_id (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:trace_id: ", p), err) }
  return err
}

func (p *AnsRoomInfoList) Equals(other *AnsRoomInfoList) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if !p.Result_.Equals(other.Result_) { return false }
  if p.Ssn != other.Ssn { return false }
  if len(p.RoomInfos) != len(other.RoomInfos) { return false }
  for i, _tgt := range p.RoomInfos {
    _src3 := other.RoomInfos[i]
    if !_tgt.Equals(_src3) { return false }
  }
  if bytes.Compare(p.TraceID, other.TraceID) != 0 { return false }
  return true
}

func (p *AnsRoomInfoList) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AnsRoomInfoList(%+v)", *p)
}

func (p *AnsRoomInfoList) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - Result_
//  - TCPAddress
//  - PmbAddress
//  - Ssn
//  - TraceID
type AnsRoomCreateInfo struct {
  RequestKey RequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  Result_ *Error `thrift:"result,2,required" db:"result" json:"result"`
  TCPAddress *InternetAddress `thrift:"tcp_address,3,required" db:"tcp_address" json:"tcp_address"`
  PmbAddress PmbAddress `thrift:"pmb_address,4,required" db:"pmb_address" json:"pmb_address"`
  Ssn Ssn `thrift:"ssn,5,required" db:"ssn" json:"ssn"`
  TraceID Buffer `thrift:"trace_id,6,required" db:"trace_id" json:"trace_id"`
}

func NewAnsRoomCreateInfo() *AnsRoomCreateInfo {
  return &AnsRoomCreateInfo{}
}


func (p *AnsRoomCreateInfo) GetRequestKey() RequestKey {
  return p.RequestKey
}
var AnsRoomCreateInfo_Result__DEFAULT *Error
func (p *AnsRoomCreateInfo) GetResult_() *Error {
  if !p.IsSetResult_() {
    return AnsRoomCreateInfo_Result__DEFAULT
  }
return p.Result_
}
var AnsRoomCreateInfo_TCPAddress_DEFAULT *InternetAddress
func (p *AnsRoomCreateInfo) GetTCPAddress() *InternetAddress {
  if !p.IsSetTCPAddress() {
    return AnsRoomCreateInfo_TCPAddress_DEFAULT
  }
return p.TCPAddress
}

func (p *AnsRoomCreateInfo) GetPmbAddress() PmbAddress {
  return p.PmbAddress
}

func (p *AnsRoomCreateInfo) GetSsn() Ssn {
  return p.Ssn
}

func (p *AnsRoomCreateInfo) GetTraceID() Buffer {
  return p.TraceID
}
func (p *AnsRoomCreateInfo) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *AnsRoomCreateInfo) IsSetTCPAddress() bool {
  return p.TCPAddress != nil
}

func (p *AnsRoomCreateInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetResult_ bool = false;
  var issetTCPAddress bool = false;
  var issetPmbAddress bool = false;
  var issetSsn bool = false;
  var issetTraceID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetTCPAddress = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetPmbAddress = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetSsn = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
        issetTraceID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  if !issetTCPAddress{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TCPAddress is not set"));
  }
  if !issetPmbAddress{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PmbAddress is not set"));
  }
  if !issetSsn{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ssn is not set"));
  }
  if !issetTraceID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TraceID is not set"));
  }
  return nil
}

func (p *AnsRoomCreateInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := RequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *AnsRoomCreateInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &Error{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *AnsRoomCreateInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.TCPAddress = &InternetAddress{}
  if err := p.TCPAddress.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TCPAddress), err)
  }
  return nil
}

func (p *AnsRoomCreateInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := PmbAddress(v)
  p.PmbAddress = temp
}
  return nil
}

func (p *AnsRoomCreateInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := Ssn(v)
  p.Ssn = temp
}
  return nil
}

func (p *AnsRoomCreateInfo)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := Buffer(v)
  p.TraceID = temp
}
  return nil
}

func (p *AnsRoomCreateInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AnsRoomCreateInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnsRoomCreateInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *AnsRoomCreateInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:result: ", p), err) }
  return err
}

func (p *AnsRoomCreateInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tcp_address", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tcp_address: ", p), err) }
  if err := p.TCPAddress.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TCPAddress), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tcp_address: ", p), err) }
  return err
}

func (p *AnsRoomCreateInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pmb_address", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pmb_address: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PmbAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pmb_address (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pmb_address: ", p), err) }
  return err
}

func (p *AnsRoomCreateInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ssn", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ssn: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Ssn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ssn (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ssn: ", p), err) }
  return err
}

func (p *AnsRoomCreateInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "trace_id", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:trace_id: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.TraceID); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trace_id (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:trace_id: ", p), err) }
  return err
}

func (p *AnsRoomCreateInfo) Equals(other *AnsRoomCreateInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if !p.Result_.Equals(other.Result_) { return false }
  if !p.TCPAddress.Equals(other.TCPAddress) { return false }
  if p.PmbAddress != other.PmbAddress { return false }
  if p.Ssn != other.Ssn { return false }
  if bytes.Compare(p.TraceID, other.TraceID) != 0 { return false }
  return true
}

func (p *AnsRoomCreateInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AnsRoomCreateInfo(%+v)", *p)
}

func (p *AnsRoomCreateInfo) Validate() error {
  return nil
}
// Attributes:
//  - PmbAddress
type NtfRoomManagerServerStart struct {
  PmbAddress PmbAddress `thrift:"pmb_address,1,required" db:"pmb_address" json:"pmb_address"`
}

func NewNtfRoomManagerServerStart() *NtfRoomManagerServerStart {
  return &NtfRoomManagerServerStart{}
}


func (p *NtfRoomManagerServerStart) GetPmbAddress() PmbAddress {
  return p.PmbAddress
}
func (p *NtfRoomManagerServerStart) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPmbAddress bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetPmbAddress = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPmbAddress{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PmbAddress is not set"));
  }
  return nil
}

func (p *NtfRoomManagerServerStart)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := PmbAddress(v)
  p.PmbAddress = temp
}
  return nil
}

func (p *NtfRoomManagerServerStart) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "NtfRoomManagerServerStart"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NtfRoomManagerServerStart) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pmb_address", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pmb_address: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PmbAddress)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pmb_address (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pmb_address: ", p), err) }
  return err
}

func (p *NtfRoomManagerServerStart) Equals(other *NtfRoomManagerServerStart) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.PmbAddress != other.PmbAddress { return false }
  return true
}

func (p *NtfRoomManagerServerStart) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NtfRoomManagerServerStart(%+v)", *p)
}

func (p *NtfRoomManagerServerStart) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - Result_
//  - Ssn
//  - UserCounts
//  - TraceID
type AnsUserCount struct {
  RequestKey RequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  Result_ *Error `thrift:"result,2,required" db:"result" json:"result"`
  Ssn Ssn `thrift:"ssn,3,required" db:"ssn" json:"ssn"`
  UserCounts map[CategoryId]int32 `thrift:"user_counts,4,required" db:"user_counts" json:"user_counts"`
  TraceID Buffer `thrift:"trace_id,5,required" db:"trace_id" json:"trace_id"`
}

func NewAnsUserCount() *AnsUserCount {
  return &AnsUserCount{}
}


func (p *AnsUserCount) GetRequestKey() RequestKey {
  return p.RequestKey
}
var AnsUserCount_Result__DEFAULT *Error
func (p *AnsUserCount) GetResult_() *Error {
  if !p.IsSetResult_() {
    return AnsUserCount_Result__DEFAULT
  }
return p.Result_
}

func (p *AnsUserCount) GetSsn() Ssn {
  return p.Ssn
}

func (p *AnsUserCount) GetUserCounts() map[CategoryId]int32 {
  return p.UserCounts
}

func (p *AnsUserCount) GetTraceID() Buffer {
  return p.TraceID
}
func (p *AnsUserCount) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *AnsUserCount) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetResult_ bool = false;
  var issetSsn bool = false;
  var issetUserCounts bool = false;
  var issetTraceID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetSsn = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetUserCounts = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetTraceID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  if !issetSsn{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ssn is not set"));
  }
  if !issetUserCounts{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserCounts is not set"));
  }
  if !issetTraceID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TraceID is not set"));
  }
  return nil
}

func (p *AnsUserCount)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := RequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *AnsUserCount)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &Error{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *AnsUserCount)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Ssn(v)
  p.Ssn = temp
}
  return nil
}

func (p *AnsUserCount)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[CategoryId]int32, size)
  p.UserCounts =  tMap
  for i := 0; i < size; i ++ {
var _key4 CategoryId
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := CategoryId(v)
    _key4 = temp
}
var _val5 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val5 = v
}
    p.UserCounts[_key4] = _val5
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *AnsUserCount)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := Buffer(v)
  p.TraceID = temp
}
  return nil
}

func (p *AnsUserCount) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AnsUserCount"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnsUserCount) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *AnsUserCount) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:result: ", p), err) }
  return err
}

func (p *AnsUserCount) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ssn", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ssn: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Ssn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ssn (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ssn: ", p), err) }
  return err
}

func (p *AnsUserCount) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_counts", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:user_counts: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.I32, len(p.UserCounts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.UserCounts {
    if err := oprot.WriteI32(ctx, int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:user_counts: ", p), err) }
  return err
}

func (p *AnsUserCount) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "trace_id", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:trace_id: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.TraceID); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trace_id (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:trace_id: ", p), err) }
  return err
}

func (p *AnsUserCount) Equals(other *AnsUserCount) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if !p.Result_.Equals(other.Result_) { return false }
  if p.Ssn != other.Ssn { return false }
  if len(p.UserCounts) != len(other.UserCounts) { return false }
  for k, _tgt := range p.UserCounts {
    _src6 := other.UserCounts[k]
    if _tgt != _src6 { return false }
  }
  if bytes.Compare(p.TraceID, other.TraceID) != 0 { return false }
  return true
}

func (p *AnsUserCount) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AnsUserCount(%+v)", *p)
}

func (p *AnsUserCount) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - Result_
//  - RoomList
//  - TraceID
type AnsRoomList struct {
  RequestKey RequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  Result_ *Error `thrift:"result,2,required" db:"result" json:"result"`
  RoomList []*RoomListInfo `thrift:"room_list,3,required" db:"room_list" json:"room_list"`
  TraceID Buffer `thrift:"trace_id,4,required" db:"trace_id" json:"trace_id"`
}

func NewAnsRoomList() *AnsRoomList {
  return &AnsRoomList{}
}


func (p *AnsRoomList) GetRequestKey() RequestKey {
  return p.RequestKey
}
var AnsRoomList_Result__DEFAULT *Error
func (p *AnsRoomList) GetResult_() *Error {
  if !p.IsSetResult_() {
    return AnsRoomList_Result__DEFAULT
  }
return p.Result_
}

func (p *AnsRoomList) GetRoomList() []*RoomListInfo {
  return p.RoomList
}

func (p *AnsRoomList) GetTraceID() Buffer {
  return p.TraceID
}
func (p *AnsRoomList) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *AnsRoomList) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetResult_ bool = false;
  var issetRoomList bool = false;
  var issetTraceID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetRoomList = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetTraceID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  if !issetRoomList{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomList is not set"));
  }
  if !issetTraceID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TraceID is not set"));
  }
  return nil
}

func (p *AnsRoomList)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := RequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *AnsRoomList)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &Error{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *AnsRoomList)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*RoomListInfo, 0, size)
  p.RoomList =  tSlice
  for i := 0; i < size; i ++ {
    _elem7 := &RoomListInfo{}
    if err := _elem7.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem7), err)
    }
    p.RoomList = append(p.RoomList, _elem7)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AnsRoomList)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Buffer(v)
  p.TraceID = temp
}
  return nil
}

func (p *AnsRoomList) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AnsRoomList"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnsRoomList) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *AnsRoomList) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:result: ", p), err) }
  return err
}

func (p *AnsRoomList) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "room_list", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:room_list: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.RoomList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RoomList {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:room_list: ", p), err) }
  return err
}

func (p *AnsRoomList) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "trace_id", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:trace_id: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.TraceID); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trace_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:trace_id: ", p), err) }
  return err
}

func (p *AnsRoomList) Equals(other *AnsRoomList) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if !p.Result_.Equals(other.Result_) { return false }
  if len(p.RoomList) != len(other.RoomList) { return false }
  for i, _tgt := range p.RoomList {
    _src8 := other.RoomList[i]
    if !_tgt.Equals(_src8) { return false }
  }
  if bytes.Compare(p.TraceID, other.TraceID) != 0 { return false }
  return true
}

func (p *AnsRoomList) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AnsRoomList(%+v)", *p)
}

func (p *AnsRoomList) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - Result_
//  - Ssn
//  - Query
//  - QueryResult_
//  - TraceID
type AnsCustomQuery struct {
  RequestKey RequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  Result_ *Error `thrift:"result,2,required" db:"result" json:"result"`
  Ssn Ssn `thrift:"ssn,3,required" db:"ssn" json:"ssn"`
  Query string `thrift:"query,4,required" db:"query" json:"query"`
  QueryResult_ string `thrift:"query_result,5,required" db:"query_result" json:"query_result"`
  TraceID Buffer `thrift:"trace_id,6,required" db:"trace_id" json:"trace_id"`
}

func NewAnsCustomQuery() *AnsCustomQuery {
  return &AnsCustomQuery{}
}


func (p *AnsCustomQuery) GetRequestKey() RequestKey {
  return p.RequestKey
}
var AnsCustomQuery_Result__DEFAULT *Error
func (p *AnsCustomQuery) GetResult_() *Error {
  if !p.IsSetResult_() {
    return AnsCustomQuery_Result__DEFAULT
  }
return p.Result_
}

func (p *AnsCustomQuery) GetSsn() Ssn {
  return p.Ssn
}

func (p *AnsCustomQuery) GetQuery() string {
  return p.Query
}

func (p *AnsCustomQuery) GetQueryResult_() string {
  return p.QueryResult_
}

func (p *AnsCustomQuery) GetTraceID() Buffer {
  return p.TraceID
}
func (p *AnsCustomQuery) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *AnsCustomQuery) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetResult_ bool = false;
  var issetSsn bool = false;
  var issetQuery bool = false;
  var issetQueryResult_ bool = false;
  var issetTraceID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetSsn = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetQuery = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetQueryResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
        issetTraceID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  if !issetSsn{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ssn is not set"));
  }
  if !issetQuery{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Query is not set"));
  }
  if !issetQueryResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field QueryResult_ is not set"));
  }
  if !issetTraceID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TraceID is not set"));
  }
  return nil
}

func (p *AnsCustomQuery)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := RequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *AnsCustomQuery)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &Error{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *AnsCustomQuery)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Ssn(v)
  p.Ssn = temp
}
  return nil
}

func (p *AnsCustomQuery)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Query = v
}
  return nil
}

func (p *AnsCustomQuery)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.QueryResult_ = v
}
  return nil
}

func (p *AnsCustomQuery)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := Buffer(v)
  p.TraceID = temp
}
  return nil
}

func (p *AnsCustomQuery) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AnsCustomQuery"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnsCustomQuery) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *AnsCustomQuery) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:result: ", p), err) }
  return err
}

func (p *AnsCustomQuery) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ssn", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ssn: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Ssn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ssn (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ssn: ", p), err) }
  return err
}

func (p *AnsCustomQuery) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "query", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:query: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Query)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.query (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:query: ", p), err) }
  return err
}

func (p *AnsCustomQuery) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "query_result", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:query_result: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.QueryResult_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.query_result (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:query_result: ", p), err) }
  return err
}

func (p *AnsCustomQuery) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "trace_id", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:trace_id: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.TraceID); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trace_id (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:trace_id: ", p), err) }
  return err
}

func (p *AnsCustomQuery) Equals(other *AnsCustomQuery) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if !p.Result_.Equals(other.Result_) { return false }
  if p.Ssn != other.Ssn { return false }
  if p.Query != other.Query { return false }
  if p.QueryResult_ != other.QueryResult_ { return false }
  if bytes.Compare(p.TraceID, other.TraceID) != 0 { return false }
  return true
}

func (p *AnsCustomQuery) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AnsCustomQuery(%+v)", *p)
}

func (p *AnsCustomQuery) Validate() error {
  return nil
}
