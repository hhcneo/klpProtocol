// Code generated by Thrift Compiler (0.19.0). DO NOT EDIT.

package client_to_user_gateway

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
	"nwm/klp/protocol"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

var _ = protocol.GoUnusedProtection__
type MessageType int64
const (
  MessageType_kReqVersion MessageType = 1
  MessageType_kReqLogin MessageType = 2
  MessageType_kReqLogout MessageType = 3
  MessageType_kForwardMessage MessageType = 4
  MessageType_kPong MessageType = 5
  MessageType_kReqCreateAndJoinRoom MessageType = 6
  MessageType_kReqJoinRoom MessageType = 7
  MessageType_kReqRandomJoinRoom MessageType = 8
  MessageType_kReqLeaveRoom MessageType = 9
  MessageType_kPing MessageType = 10
  MessageType_kNtfPause MessageType = 11
  MessageType_kNtfResume MessageType = 12
  MessageType_kReqRoomList MessageType = 13
  MessageType_kReqChangeLobby MessageType = 14
  MessageType_kReqRandomJoinRoomWithServerOption MessageType = 15
  MessageType_kReqJoinTnmt MessageType = 16
  MessageType_kReqLeaveTnmt MessageType = 17
)

func (p MessageType) String() string {
  switch p {
  case MessageType_kReqVersion: return "kReqVersion"
  case MessageType_kReqLogin: return "kReqLogin"
  case MessageType_kReqLogout: return "kReqLogout"
  case MessageType_kForwardMessage: return "kForwardMessage"
  case MessageType_kPong: return "kPong"
  case MessageType_kReqCreateAndJoinRoom: return "kReqCreateAndJoinRoom"
  case MessageType_kReqJoinRoom: return "kReqJoinRoom"
  case MessageType_kReqRandomJoinRoom: return "kReqRandomJoinRoom"
  case MessageType_kReqLeaveRoom: return "kReqLeaveRoom"
  case MessageType_kPing: return "kPing"
  case MessageType_kNtfPause: return "kNtfPause"
  case MessageType_kNtfResume: return "kNtfResume"
  case MessageType_kReqRoomList: return "kReqRoomList"
  case MessageType_kReqChangeLobby: return "kReqChangeLobby"
  case MessageType_kReqRandomJoinRoomWithServerOption: return "kReqRandomJoinRoomWithServerOption"
  case MessageType_kReqJoinTnmt: return "kReqJoinTnmt"
  case MessageType_kReqLeaveTnmt: return "kReqLeaveTnmt"
  }
  return "<UNSET>"
}

func MessageTypeFromString(s string) (MessageType, error) {
  switch s {
  case "kReqVersion": return MessageType_kReqVersion, nil 
  case "kReqLogin": return MessageType_kReqLogin, nil 
  case "kReqLogout": return MessageType_kReqLogout, nil 
  case "kForwardMessage": return MessageType_kForwardMessage, nil 
  case "kPong": return MessageType_kPong, nil 
  case "kReqCreateAndJoinRoom": return MessageType_kReqCreateAndJoinRoom, nil 
  case "kReqJoinRoom": return MessageType_kReqJoinRoom, nil 
  case "kReqRandomJoinRoom": return MessageType_kReqRandomJoinRoom, nil 
  case "kReqLeaveRoom": return MessageType_kReqLeaveRoom, nil 
  case "kPing": return MessageType_kPing, nil 
  case "kNtfPause": return MessageType_kNtfPause, nil 
  case "kNtfResume": return MessageType_kNtfResume, nil 
  case "kReqRoomList": return MessageType_kReqRoomList, nil 
  case "kReqChangeLobby": return MessageType_kReqChangeLobby, nil 
  case "kReqRandomJoinRoomWithServerOption": return MessageType_kReqRandomJoinRoomWithServerOption, nil 
  case "kReqJoinTnmt": return MessageType_kReqJoinTnmt, nil 
  case "kReqLeaveTnmt": return MessageType_kReqLeaveTnmt, nil 
  }
  return MessageType(0), fmt.Errorf("not a valid MessageType string")
}


func MessageTypePtr(v MessageType) *MessageType { return &v }

func (p MessageType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *MessageType) UnmarshalText(text []byte) error {
q, err := MessageTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *MessageType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = MessageType(v)
return nil
}

func (p * MessageType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type RandomJoinRoomLatestRoomOpt int64
const (
  RandomJoinRoomLatestRoomOpt_kNone RandomJoinRoomLatestRoomOpt = 0
  RandomJoinRoomLatestRoomOpt_kExclude RandomJoinRoomLatestRoomOpt = 1
  RandomJoinRoomLatestRoomOpt_kLowPriority RandomJoinRoomLatestRoomOpt = 2
  RandomJoinRoomLatestRoomOpt_kInclude RandomJoinRoomLatestRoomOpt = 3
)

func (p RandomJoinRoomLatestRoomOpt) String() string {
  switch p {
  case RandomJoinRoomLatestRoomOpt_kNone: return "kNone"
  case RandomJoinRoomLatestRoomOpt_kExclude: return "kExclude"
  case RandomJoinRoomLatestRoomOpt_kLowPriority: return "kLowPriority"
  case RandomJoinRoomLatestRoomOpt_kInclude: return "kInclude"
  }
  return "<UNSET>"
}

func RandomJoinRoomLatestRoomOptFromString(s string) (RandomJoinRoomLatestRoomOpt, error) {
  switch s {
  case "kNone": return RandomJoinRoomLatestRoomOpt_kNone, nil 
  case "kExclude": return RandomJoinRoomLatestRoomOpt_kExclude, nil 
  case "kLowPriority": return RandomJoinRoomLatestRoomOpt_kLowPriority, nil 
  case "kInclude": return RandomJoinRoomLatestRoomOpt_kInclude, nil 
  }
  return RandomJoinRoomLatestRoomOpt(0), fmt.Errorf("not a valid RandomJoinRoomLatestRoomOpt string")
}


func RandomJoinRoomLatestRoomOptPtr(v RandomJoinRoomLatestRoomOpt) *RandomJoinRoomLatestRoomOpt { return &v }

func (p RandomJoinRoomLatestRoomOpt) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *RandomJoinRoomLatestRoomOpt) UnmarshalText(text []byte) error {
q, err := RandomJoinRoomLatestRoomOptFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *RandomJoinRoomLatestRoomOpt) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = RandomJoinRoomLatestRoomOpt(v)
return nil
}

func (p * RandomJoinRoomLatestRoomOpt) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - RequestKey
//  - Ssn
//  - KlpProtocol
//  - KlpClient
//  - ContentsProtocol
//  - ContentsClient
type ReqVersion struct {
  RequestKey protocol.ClientRequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  Ssn protocol.Ssn `thrift:"ssn,2,required" db:"ssn" json:"ssn"`
  KlpProtocol int32 `thrift:"klp_protocol,3,required" db:"klp_protocol" json:"klp_protocol"`
  KlpClient int32 `thrift:"klp_client,4,required" db:"klp_client" json:"klp_client"`
  ContentsProtocol int32 `thrift:"contents_protocol,5,required" db:"contents_protocol" json:"contents_protocol"`
  ContentsClient int32 `thrift:"contents_client,6,required" db:"contents_client" json:"contents_client"`
}

func NewReqVersion() *ReqVersion {
  return &ReqVersion{
KlpProtocol: 14,
}
}


func (p *ReqVersion) GetRequestKey() protocol.ClientRequestKey {
  return p.RequestKey
}

func (p *ReqVersion) GetSsn() protocol.Ssn {
  return p.Ssn
}

func (p *ReqVersion) GetKlpProtocol() int32 {
  return p.KlpProtocol
}

func (p *ReqVersion) GetKlpClient() int32 {
  return p.KlpClient
}

func (p *ReqVersion) GetContentsProtocol() int32 {
  return p.ContentsProtocol
}

func (p *ReqVersion) GetContentsClient() int32 {
  return p.ContentsClient
}
func (p *ReqVersion) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetSsn bool = false;
  var issetKlpProtocol bool = false;
  var issetKlpClient bool = false;
  var issetContentsProtocol bool = false;
  var issetContentsClient bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetSsn = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetKlpProtocol = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetKlpClient = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetContentsProtocol = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
        issetContentsClient = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetSsn{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ssn is not set"));
  }
  if !issetKlpProtocol{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field KlpProtocol is not set"));
  }
  if !issetKlpClient{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field KlpClient is not set"));
  }
  if !issetContentsProtocol{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ContentsProtocol is not set"));
  }
  if !issetContentsClient{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ContentsClient is not set"));
  }
  return nil
}

func (p *ReqVersion)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.ClientRequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *ReqVersion)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := protocol.Ssn(v)
  p.Ssn = temp
}
  return nil
}

func (p *ReqVersion)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.KlpProtocol = v
}
  return nil
}

func (p *ReqVersion)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.KlpClient = v
}
  return nil
}

func (p *ReqVersion)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ContentsProtocol = v
}
  return nil
}

func (p *ReqVersion)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ContentsClient = v
}
  return nil
}

func (p *ReqVersion) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReqVersion"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReqVersion) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *ReqVersion) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ssn", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ssn: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Ssn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ssn (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ssn: ", p), err) }
  return err
}

func (p *ReqVersion) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "klp_protocol", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:klp_protocol: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.KlpProtocol)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.klp_protocol (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:klp_protocol: ", p), err) }
  return err
}

func (p *ReqVersion) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "klp_client", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:klp_client: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.KlpClient)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.klp_client (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:klp_client: ", p), err) }
  return err
}

func (p *ReqVersion) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contents_protocol", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:contents_protocol: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ContentsProtocol)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contents_protocol (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:contents_protocol: ", p), err) }
  return err
}

func (p *ReqVersion) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contents_client", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:contents_client: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ContentsClient)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contents_client (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:contents_client: ", p), err) }
  return err
}

func (p *ReqVersion) Equals(other *ReqVersion) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if p.Ssn != other.Ssn { return false }
  if p.KlpProtocol != other.KlpProtocol { return false }
  if p.KlpClient != other.KlpClient { return false }
  if p.ContentsProtocol != other.ContentsProtocol { return false }
  if p.ContentsClient != other.ContentsClient { return false }
  return true
}

func (p *ReqVersion) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReqVersion(%+v)", *p)
}

func (p *ReqVersion) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - Ssn
//  - MembershipType
//  - MemberInfo
type ReqLogin struct {
  RequestKey protocol.ClientRequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  Ssn protocol.Ssn `thrift:"ssn,2,required" db:"ssn" json:"ssn"`
  MembershipType protocol.MembershipType `thrift:"membership_type,3,required" db:"membership_type" json:"membership_type"`
  MemberInfo protocol.Buffer `thrift:"member_info,4,required" db:"member_info" json:"member_info"`
}

func NewReqLogin() *ReqLogin {
  return &ReqLogin{}
}


func (p *ReqLogin) GetRequestKey() protocol.ClientRequestKey {
  return p.RequestKey
}

func (p *ReqLogin) GetSsn() protocol.Ssn {
  return p.Ssn
}

func (p *ReqLogin) GetMembershipType() protocol.MembershipType {
  return p.MembershipType
}

func (p *ReqLogin) GetMemberInfo() protocol.Buffer {
  return p.MemberInfo
}
func (p *ReqLogin) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetSsn bool = false;
  var issetMembershipType bool = false;
  var issetMemberInfo bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetSsn = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetMembershipType = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetMemberInfo = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetSsn{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ssn is not set"));
  }
  if !issetMembershipType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MembershipType is not set"));
  }
  if !issetMemberInfo{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MemberInfo is not set"));
  }
  return nil
}

func (p *ReqLogin)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.ClientRequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *ReqLogin)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := protocol.Ssn(v)
  p.Ssn = temp
}
  return nil
}

func (p *ReqLogin)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := protocol.MembershipType(v)
  p.MembershipType = temp
}
  return nil
}

func (p *ReqLogin)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := protocol.Buffer(v)
  p.MemberInfo = temp
}
  return nil
}

func (p *ReqLogin) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReqLogin"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReqLogin) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *ReqLogin) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ssn", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ssn: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Ssn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ssn (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ssn: ", p), err) }
  return err
}

func (p *ReqLogin) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "membership_type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:membership_type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MembershipType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.membership_type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:membership_type: ", p), err) }
  return err
}

func (p *ReqLogin) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "member_info", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:member_info: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.MemberInfo); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.member_info (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:member_info: ", p), err) }
  return err
}

func (p *ReqLogin) Equals(other *ReqLogin) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if p.Ssn != other.Ssn { return false }
  if p.MembershipType != other.MembershipType { return false }
  if bytes.Compare(p.MemberInfo, other.MemberInfo) != 0 { return false }
  return true
}

func (p *ReqLogin) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReqLogin(%+v)", *p)
}

func (p *ReqLogin) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
type ReqLogout struct {
  RequestKey protocol.ClientRequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
}

func NewReqLogout() *ReqLogout {
  return &ReqLogout{}
}


func (p *ReqLogout) GetRequestKey() protocol.ClientRequestKey {
  return p.RequestKey
}
func (p *ReqLogout) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  return nil
}

func (p *ReqLogout)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.ClientRequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *ReqLogout) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReqLogout"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReqLogout) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *ReqLogout) Equals(other *ReqLogout) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  return true
}

func (p *ReqLogout) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReqLogout(%+v)", *p)
}

func (p *ReqLogout) Validate() error {
  return nil
}
// Attributes:
//  - ServerType
//  - EnvelopedMessage
//  - ForwardType
type ForwardMessage struct {
  ServerType protocol.ServerType `thrift:"server_type,1,required" db:"server_type" json:"server_type"`
  EnvelopedMessage protocol.KlpProtocolBuffer `thrift:"enveloped_message,2,required" db:"enveloped_message" json:"enveloped_message"`
  ForwardType protocol.ForwardType `thrift:"forward_type,3" db:"forward_type" json:"forward_type"`
}

func NewForwardMessage() *ForwardMessage {
  return &ForwardMessage{
ForwardType: 0,
}
}


func (p *ForwardMessage) GetServerType() protocol.ServerType {
  return p.ServerType
}

func (p *ForwardMessage) GetEnvelopedMessage() protocol.KlpProtocolBuffer {
  return p.EnvelopedMessage
}
var ForwardMessage_ForwardType_DEFAULT protocol.ForwardType = 0

func (p *ForwardMessage) GetForwardType() protocol.ForwardType {
  return p.ForwardType
}
func (p *ForwardMessage) IsSetForwardType() bool {
  return p.ForwardType != ForwardMessage_ForwardType_DEFAULT
}

func (p *ForwardMessage) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetServerType bool = false;
  var issetEnvelopedMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetServerType = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetEnvelopedMessage = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetServerType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServerType is not set"));
  }
  if !issetEnvelopedMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EnvelopedMessage is not set"));
  }
  return nil
}

func (p *ForwardMessage)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.ServerType(v)
  p.ServerType = temp
}
  return nil
}

func (p *ForwardMessage)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := protocol.KlpProtocolBuffer(v)
  p.EnvelopedMessage = temp
}
  return nil
}

func (p *ForwardMessage)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := protocol.ForwardType(v)
  p.ForwardType = temp
}
  return nil
}

func (p *ForwardMessage) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ForwardMessage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ForwardMessage) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "server_type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:server_type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ServerType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.server_type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:server_type: ", p), err) }
  return err
}

func (p *ForwardMessage) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "enveloped_message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:enveloped_message: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.EnvelopedMessage); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enveloped_message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:enveloped_message: ", p), err) }
  return err
}

func (p *ForwardMessage) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetForwardType() {
    if err := oprot.WriteFieldBegin(ctx, "forward_type", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:forward_type: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(p.ForwardType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.forward_type (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:forward_type: ", p), err) }
  }
  return err
}

func (p *ForwardMessage) Equals(other *ForwardMessage) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ServerType != other.ServerType { return false }
  if bytes.Compare(p.EnvelopedMessage, other.EnvelopedMessage) != 0 { return false }
  if p.ForwardType != other.ForwardType { return false }
  return true
}

func (p *ForwardMessage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ForwardMessage(%+v)", *p)
}

func (p *ForwardMessage) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - TimeStamp
type Pong struct {
  RequestKey protocol.ClientRequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  TimeStamp int64 `thrift:"time_stamp,2,required" db:"time_stamp" json:"time_stamp"`
}

func NewPong() *Pong {
  return &Pong{}
}


func (p *Pong) GetRequestKey() protocol.ClientRequestKey {
  return p.RequestKey
}

func (p *Pong) GetTimeStamp() int64 {
  return p.TimeStamp
}
func (p *Pong) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetTimeStamp bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetTimeStamp = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetTimeStamp{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TimeStamp is not set"));
  }
  return nil
}

func (p *Pong)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.ClientRequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *Pong)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TimeStamp = v
}
  return nil
}

func (p *Pong) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Pong"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pong) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *Pong) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "time_stamp", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:time_stamp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TimeStamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.time_stamp (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:time_stamp: ", p), err) }
  return err
}

func (p *Pong) Equals(other *Pong) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if p.TimeStamp != other.TimeStamp { return false }
  return true
}

func (p *Pong) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pong(%+v)", *p)
}

func (p *Pong) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - CategoryID
//  - RoomOption
//  - UserInfo
//  - OptMinCategoryID
//  - OptMinUserCount
type ReqCreateAndJoinRoom struct {
  RequestKey protocol.ClientRequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  CategoryID protocol.CategoryId `thrift:"category_id,2,required" db:"category_id" json:"category_id"`
  RoomOption protocol.Buffer `thrift:"room_option,3,required" db:"room_option" json:"room_option"`
  UserInfo protocol.Buffer `thrift:"user_info,4,required" db:"user_info" json:"user_info"`
  OptMinCategoryID *protocol.CategoryId `thrift:"opt_min_category_id,5" db:"opt_min_category_id" json:"opt_min_category_id,omitempty"`
  OptMinUserCount *int32 `thrift:"opt_min_user_count,6" db:"opt_min_user_count" json:"opt_min_user_count,omitempty"`
}

func NewReqCreateAndJoinRoom() *ReqCreateAndJoinRoom {
  return &ReqCreateAndJoinRoom{}
}


func (p *ReqCreateAndJoinRoom) GetRequestKey() protocol.ClientRequestKey {
  return p.RequestKey
}

func (p *ReqCreateAndJoinRoom) GetCategoryID() protocol.CategoryId {
  return p.CategoryID
}

func (p *ReqCreateAndJoinRoom) GetRoomOption() protocol.Buffer {
  return p.RoomOption
}

func (p *ReqCreateAndJoinRoom) GetUserInfo() protocol.Buffer {
  return p.UserInfo
}
var ReqCreateAndJoinRoom_OptMinCategoryID_DEFAULT protocol.CategoryId
func (p *ReqCreateAndJoinRoom) GetOptMinCategoryID() protocol.CategoryId {
  if !p.IsSetOptMinCategoryID() {
    return ReqCreateAndJoinRoom_OptMinCategoryID_DEFAULT
  }
return *p.OptMinCategoryID
}
var ReqCreateAndJoinRoom_OptMinUserCount_DEFAULT int32
func (p *ReqCreateAndJoinRoom) GetOptMinUserCount() int32 {
  if !p.IsSetOptMinUserCount() {
    return ReqCreateAndJoinRoom_OptMinUserCount_DEFAULT
  }
return *p.OptMinUserCount
}
func (p *ReqCreateAndJoinRoom) IsSetOptMinCategoryID() bool {
  return p.OptMinCategoryID != nil
}

func (p *ReqCreateAndJoinRoom) IsSetOptMinUserCount() bool {
  return p.OptMinUserCount != nil
}

func (p *ReqCreateAndJoinRoom) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetCategoryID bool = false;
  var issetRoomOption bool = false;
  var issetUserInfo bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetCategoryID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetRoomOption = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetUserInfo = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetCategoryID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CategoryID is not set"));
  }
  if !issetRoomOption{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomOption is not set"));
  }
  if !issetUserInfo{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserInfo is not set"));
  }
  return nil
}

func (p *ReqCreateAndJoinRoom)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.ClientRequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *ReqCreateAndJoinRoom)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := protocol.CategoryId(v)
  p.CategoryID = temp
}
  return nil
}

func (p *ReqCreateAndJoinRoom)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := protocol.Buffer(v)
  p.RoomOption = temp
}
  return nil
}

func (p *ReqCreateAndJoinRoom)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := protocol.Buffer(v)
  p.UserInfo = temp
}
  return nil
}

func (p *ReqCreateAndJoinRoom)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := protocol.CategoryId(v)
  p.OptMinCategoryID = &temp
}
  return nil
}

func (p *ReqCreateAndJoinRoom)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.OptMinUserCount = &v
}
  return nil
}

func (p *ReqCreateAndJoinRoom) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReqCreateAndJoinRoom"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReqCreateAndJoinRoom) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *ReqCreateAndJoinRoom) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "category_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:category_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CategoryID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.category_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:category_id: ", p), err) }
  return err
}

func (p *ReqCreateAndJoinRoom) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "room_option", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:room_option: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.RoomOption); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.room_option (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:room_option: ", p), err) }
  return err
}

func (p *ReqCreateAndJoinRoom) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_info", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:user_info: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.UserInfo); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_info (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:user_info: ", p), err) }
  return err
}

func (p *ReqCreateAndJoinRoom) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetOptMinCategoryID() {
    if err := oprot.WriteFieldBegin(ctx, "opt_min_category_id", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:opt_min_category_id: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.OptMinCategoryID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.opt_min_category_id (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:opt_min_category_id: ", p), err) }
  }
  return err
}

func (p *ReqCreateAndJoinRoom) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetOptMinUserCount() {
    if err := oprot.WriteFieldBegin(ctx, "opt_min_user_count", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:opt_min_user_count: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.OptMinUserCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.opt_min_user_count (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:opt_min_user_count: ", p), err) }
  }
  return err
}

func (p *ReqCreateAndJoinRoom) Equals(other *ReqCreateAndJoinRoom) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if p.CategoryID != other.CategoryID { return false }
  if bytes.Compare(p.RoomOption, other.RoomOption) != 0 { return false }
  if bytes.Compare(p.UserInfo, other.UserInfo) != 0 { return false }
  if p.OptMinCategoryID != other.OptMinCategoryID {
    if p.OptMinCategoryID == nil || other.OptMinCategoryID == nil {
      return false
    }
    if (*p.OptMinCategoryID) != (*other.OptMinCategoryID) { return false }
  }
  if p.OptMinUserCount != other.OptMinUserCount {
    if p.OptMinUserCount == nil || other.OptMinUserCount == nil {
      return false
    }
    if (*p.OptMinUserCount) != (*other.OptMinUserCount) { return false }
  }
  return true
}

func (p *ReqCreateAndJoinRoom) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReqCreateAndJoinRoom(%+v)", *p)
}

func (p *ReqCreateAndJoinRoom) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - RoomID
//  - UserInfo
type ReqJoinRoom struct {
  RequestKey protocol.ClientRequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  RoomID protocol.RoomId `thrift:"room_id,2,required" db:"room_id" json:"room_id"`
  UserInfo protocol.Buffer `thrift:"user_info,3,required" db:"user_info" json:"user_info"`
}

func NewReqJoinRoom() *ReqJoinRoom {
  return &ReqJoinRoom{}
}


func (p *ReqJoinRoom) GetRequestKey() protocol.ClientRequestKey {
  return p.RequestKey
}

func (p *ReqJoinRoom) GetRoomID() protocol.RoomId {
  return p.RoomID
}

func (p *ReqJoinRoom) GetUserInfo() protocol.Buffer {
  return p.UserInfo
}
func (p *ReqJoinRoom) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetRoomID bool = false;
  var issetUserInfo bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetRoomID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetUserInfo = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetRoomID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomID is not set"));
  }
  if !issetUserInfo{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserInfo is not set"));
  }
  return nil
}

func (p *ReqJoinRoom)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.ClientRequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *ReqJoinRoom)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := protocol.RoomId(v)
  p.RoomID = temp
}
  return nil
}

func (p *ReqJoinRoom)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := protocol.Buffer(v)
  p.UserInfo = temp
}
  return nil
}

func (p *ReqJoinRoom) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReqJoinRoom"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReqJoinRoom) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *ReqJoinRoom) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "room_id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:room_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RoomID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.room_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:room_id: ", p), err) }
  return err
}

func (p *ReqJoinRoom) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_info", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:user_info: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.UserInfo); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_info (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:user_info: ", p), err) }
  return err
}

func (p *ReqJoinRoom) Equals(other *ReqJoinRoom) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if p.RoomID != other.RoomID { return false }
  if bytes.Compare(p.UserInfo, other.UserInfo) != 0 { return false }
  return true
}

func (p *ReqJoinRoom) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReqJoinRoom(%+v)", *p)
}

func (p *ReqJoinRoom) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - CategoryID
//  - UserInfo
//  - SearchCondition
//  - RoomOption
//  - AutoCreate
//  - OptLatestRoom
//  - OptMinCategoryID
//  - OptMinUserCount
type ReqRandomJoinRoom struct {
  RequestKey protocol.ClientRequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  CategoryID protocol.CategoryId `thrift:"category_id,2,required" db:"category_id" json:"category_id"`
  UserInfo protocol.Buffer `thrift:"user_info,3,required" db:"user_info" json:"user_info"`
  SearchCondition string `thrift:"search_condition,4,required" db:"search_condition" json:"search_condition"`
  RoomOption protocol.Buffer `thrift:"room_option,5,required" db:"room_option" json:"room_option"`
  AutoCreate *bool `thrift:"auto_create,6" db:"auto_create" json:"auto_create,omitempty"`
  OptLatestRoom *RandomJoinRoomLatestRoomOpt `thrift:"opt_latest_room,7" db:"opt_latest_room" json:"opt_latest_room,omitempty"`
  OptMinCategoryID *protocol.CategoryId `thrift:"opt_min_category_id,8" db:"opt_min_category_id" json:"opt_min_category_id,omitempty"`
  OptMinUserCount *int32 `thrift:"opt_min_user_count,9" db:"opt_min_user_count" json:"opt_min_user_count,omitempty"`
}

func NewReqRandomJoinRoom() *ReqRandomJoinRoom {
  return &ReqRandomJoinRoom{}
}


func (p *ReqRandomJoinRoom) GetRequestKey() protocol.ClientRequestKey {
  return p.RequestKey
}

func (p *ReqRandomJoinRoom) GetCategoryID() protocol.CategoryId {
  return p.CategoryID
}

func (p *ReqRandomJoinRoom) GetUserInfo() protocol.Buffer {
  return p.UserInfo
}

func (p *ReqRandomJoinRoom) GetSearchCondition() string {
  return p.SearchCondition
}

func (p *ReqRandomJoinRoom) GetRoomOption() protocol.Buffer {
  return p.RoomOption
}
var ReqRandomJoinRoom_AutoCreate_DEFAULT bool
func (p *ReqRandomJoinRoom) GetAutoCreate() bool {
  if !p.IsSetAutoCreate() {
    return ReqRandomJoinRoom_AutoCreate_DEFAULT
  }
return *p.AutoCreate
}
var ReqRandomJoinRoom_OptLatestRoom_DEFAULT RandomJoinRoomLatestRoomOpt
func (p *ReqRandomJoinRoom) GetOptLatestRoom() RandomJoinRoomLatestRoomOpt {
  if !p.IsSetOptLatestRoom() {
    return ReqRandomJoinRoom_OptLatestRoom_DEFAULT
  }
return *p.OptLatestRoom
}
var ReqRandomJoinRoom_OptMinCategoryID_DEFAULT protocol.CategoryId
func (p *ReqRandomJoinRoom) GetOptMinCategoryID() protocol.CategoryId {
  if !p.IsSetOptMinCategoryID() {
    return ReqRandomJoinRoom_OptMinCategoryID_DEFAULT
  }
return *p.OptMinCategoryID
}
var ReqRandomJoinRoom_OptMinUserCount_DEFAULT int32
func (p *ReqRandomJoinRoom) GetOptMinUserCount() int32 {
  if !p.IsSetOptMinUserCount() {
    return ReqRandomJoinRoom_OptMinUserCount_DEFAULT
  }
return *p.OptMinUserCount
}
func (p *ReqRandomJoinRoom) IsSetAutoCreate() bool {
  return p.AutoCreate != nil
}

func (p *ReqRandomJoinRoom) IsSetOptLatestRoom() bool {
  return p.OptLatestRoom != nil
}

func (p *ReqRandomJoinRoom) IsSetOptMinCategoryID() bool {
  return p.OptMinCategoryID != nil
}

func (p *ReqRandomJoinRoom) IsSetOptMinUserCount() bool {
  return p.OptMinUserCount != nil
}

func (p *ReqRandomJoinRoom) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetCategoryID bool = false;
  var issetUserInfo bool = false;
  var issetSearchCondition bool = false;
  var issetRoomOption bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetCategoryID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetUserInfo = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetSearchCondition = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetRoomOption = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetCategoryID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CategoryID is not set"));
  }
  if !issetUserInfo{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserInfo is not set"));
  }
  if !issetSearchCondition{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SearchCondition is not set"));
  }
  if !issetRoomOption{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomOption is not set"));
  }
  return nil
}

func (p *ReqRandomJoinRoom)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.ClientRequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *ReqRandomJoinRoom)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := protocol.CategoryId(v)
  p.CategoryID = temp
}
  return nil
}

func (p *ReqRandomJoinRoom)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := protocol.Buffer(v)
  p.UserInfo = temp
}
  return nil
}

func (p *ReqRandomJoinRoom)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SearchCondition = v
}
  return nil
}

func (p *ReqRandomJoinRoom)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := protocol.Buffer(v)
  p.RoomOption = temp
}
  return nil
}

func (p *ReqRandomJoinRoom)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.AutoCreate = &v
}
  return nil
}

func (p *ReqRandomJoinRoom)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := RandomJoinRoomLatestRoomOpt(v)
  p.OptLatestRoom = &temp
}
  return nil
}

func (p *ReqRandomJoinRoom)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := protocol.CategoryId(v)
  p.OptMinCategoryID = &temp
}
  return nil
}

func (p *ReqRandomJoinRoom)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.OptMinUserCount = &v
}
  return nil
}

func (p *ReqRandomJoinRoom) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReqRandomJoinRoom"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReqRandomJoinRoom) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *ReqRandomJoinRoom) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "category_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:category_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CategoryID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.category_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:category_id: ", p), err) }
  return err
}

func (p *ReqRandomJoinRoom) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_info", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:user_info: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.UserInfo); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_info (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:user_info: ", p), err) }
  return err
}

func (p *ReqRandomJoinRoom) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "search_condition", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:search_condition: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SearchCondition)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.search_condition (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:search_condition: ", p), err) }
  return err
}

func (p *ReqRandomJoinRoom) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "room_option", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:room_option: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.RoomOption); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.room_option (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:room_option: ", p), err) }
  return err
}

func (p *ReqRandomJoinRoom) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAutoCreate() {
    if err := oprot.WriteFieldBegin(ctx, "auto_create", thrift.BOOL, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:auto_create: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.AutoCreate)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.auto_create (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:auto_create: ", p), err) }
  }
  return err
}

func (p *ReqRandomJoinRoom) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetOptLatestRoom() {
    if err := oprot.WriteFieldBegin(ctx, "opt_latest_room", thrift.I32, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:opt_latest_room: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.OptLatestRoom)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.opt_latest_room (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:opt_latest_room: ", p), err) }
  }
  return err
}

func (p *ReqRandomJoinRoom) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetOptMinCategoryID() {
    if err := oprot.WriteFieldBegin(ctx, "opt_min_category_id", thrift.I32, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:opt_min_category_id: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.OptMinCategoryID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.opt_min_category_id (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:opt_min_category_id: ", p), err) }
  }
  return err
}

func (p *ReqRandomJoinRoom) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetOptMinUserCount() {
    if err := oprot.WriteFieldBegin(ctx, "opt_min_user_count", thrift.I32, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:opt_min_user_count: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.OptMinUserCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.opt_min_user_count (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:opt_min_user_count: ", p), err) }
  }
  return err
}

func (p *ReqRandomJoinRoom) Equals(other *ReqRandomJoinRoom) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if p.CategoryID != other.CategoryID { return false }
  if bytes.Compare(p.UserInfo, other.UserInfo) != 0 { return false }
  if p.SearchCondition != other.SearchCondition { return false }
  if bytes.Compare(p.RoomOption, other.RoomOption) != 0 { return false }
  if p.AutoCreate != other.AutoCreate {
    if p.AutoCreate == nil || other.AutoCreate == nil {
      return false
    }
    if (*p.AutoCreate) != (*other.AutoCreate) { return false }
  }
  if p.OptLatestRoom != other.OptLatestRoom {
    if p.OptLatestRoom == nil || other.OptLatestRoom == nil {
      return false
    }
    if (*p.OptLatestRoom) != (*other.OptLatestRoom) { return false }
  }
  if p.OptMinCategoryID != other.OptMinCategoryID {
    if p.OptMinCategoryID == nil || other.OptMinCategoryID == nil {
      return false
    }
    if (*p.OptMinCategoryID) != (*other.OptMinCategoryID) { return false }
  }
  if p.OptMinUserCount != other.OptMinUserCount {
    if p.OptMinUserCount == nil || other.OptMinUserCount == nil {
      return false
    }
    if (*p.OptMinUserCount) != (*other.OptMinUserCount) { return false }
  }
  return true
}

func (p *ReqRandomJoinRoom) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReqRandomJoinRoom(%+v)", *p)
}

func (p *ReqRandomJoinRoom) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - CategoryID
//  - UserInfo
//  - SearchCondition
//  - RoomOption
//  - ServerOptionJSON
//  - AutoCreate
//  - OptLatestRoom
//  - OptMinCategoryID
//  - OptMinUserCount
type ReqRandomJoinRoomWithServerOption struct {
  RequestKey protocol.ClientRequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  CategoryID protocol.CategoryId `thrift:"category_id,2,required" db:"category_id" json:"category_id"`
  UserInfo protocol.Buffer `thrift:"user_info,3,required" db:"user_info" json:"user_info"`
  SearchCondition string `thrift:"search_condition,4,required" db:"search_condition" json:"search_condition"`
  RoomOption protocol.Buffer `thrift:"room_option,5,required" db:"room_option" json:"room_option"`
  ServerOptionJSON protocol.Buffer `thrift:"server_option_json,6,required" db:"server_option_json" json:"server_option_json"`
  AutoCreate *bool `thrift:"auto_create,7" db:"auto_create" json:"auto_create,omitempty"`
  OptLatestRoom *RandomJoinRoomLatestRoomOpt `thrift:"opt_latest_room,8" db:"opt_latest_room" json:"opt_latest_room,omitempty"`
  OptMinCategoryID *protocol.CategoryId `thrift:"opt_min_category_id,9" db:"opt_min_category_id" json:"opt_min_category_id,omitempty"`
  OptMinUserCount *int32 `thrift:"opt_min_user_count,10" db:"opt_min_user_count" json:"opt_min_user_count,omitempty"`
}

func NewReqRandomJoinRoomWithServerOption() *ReqRandomJoinRoomWithServerOption {
  return &ReqRandomJoinRoomWithServerOption{}
}


func (p *ReqRandomJoinRoomWithServerOption) GetRequestKey() protocol.ClientRequestKey {
  return p.RequestKey
}

func (p *ReqRandomJoinRoomWithServerOption) GetCategoryID() protocol.CategoryId {
  return p.CategoryID
}

func (p *ReqRandomJoinRoomWithServerOption) GetUserInfo() protocol.Buffer {
  return p.UserInfo
}

func (p *ReqRandomJoinRoomWithServerOption) GetSearchCondition() string {
  return p.SearchCondition
}

func (p *ReqRandomJoinRoomWithServerOption) GetRoomOption() protocol.Buffer {
  return p.RoomOption
}

func (p *ReqRandomJoinRoomWithServerOption) GetServerOptionJSON() protocol.Buffer {
  return p.ServerOptionJSON
}
var ReqRandomJoinRoomWithServerOption_AutoCreate_DEFAULT bool
func (p *ReqRandomJoinRoomWithServerOption) GetAutoCreate() bool {
  if !p.IsSetAutoCreate() {
    return ReqRandomJoinRoomWithServerOption_AutoCreate_DEFAULT
  }
return *p.AutoCreate
}
var ReqRandomJoinRoomWithServerOption_OptLatestRoom_DEFAULT RandomJoinRoomLatestRoomOpt
func (p *ReqRandomJoinRoomWithServerOption) GetOptLatestRoom() RandomJoinRoomLatestRoomOpt {
  if !p.IsSetOptLatestRoom() {
    return ReqRandomJoinRoomWithServerOption_OptLatestRoom_DEFAULT
  }
return *p.OptLatestRoom
}
var ReqRandomJoinRoomWithServerOption_OptMinCategoryID_DEFAULT protocol.CategoryId
func (p *ReqRandomJoinRoomWithServerOption) GetOptMinCategoryID() protocol.CategoryId {
  if !p.IsSetOptMinCategoryID() {
    return ReqRandomJoinRoomWithServerOption_OptMinCategoryID_DEFAULT
  }
return *p.OptMinCategoryID
}
var ReqRandomJoinRoomWithServerOption_OptMinUserCount_DEFAULT int32
func (p *ReqRandomJoinRoomWithServerOption) GetOptMinUserCount() int32 {
  if !p.IsSetOptMinUserCount() {
    return ReqRandomJoinRoomWithServerOption_OptMinUserCount_DEFAULT
  }
return *p.OptMinUserCount
}
func (p *ReqRandomJoinRoomWithServerOption) IsSetAutoCreate() bool {
  return p.AutoCreate != nil
}

func (p *ReqRandomJoinRoomWithServerOption) IsSetOptLatestRoom() bool {
  return p.OptLatestRoom != nil
}

func (p *ReqRandomJoinRoomWithServerOption) IsSetOptMinCategoryID() bool {
  return p.OptMinCategoryID != nil
}

func (p *ReqRandomJoinRoomWithServerOption) IsSetOptMinUserCount() bool {
  return p.OptMinUserCount != nil
}

func (p *ReqRandomJoinRoomWithServerOption) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetCategoryID bool = false;
  var issetUserInfo bool = false;
  var issetSearchCondition bool = false;
  var issetRoomOption bool = false;
  var issetServerOptionJSON bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetCategoryID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetUserInfo = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetSearchCondition = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetRoomOption = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
        issetServerOptionJSON = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetCategoryID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CategoryID is not set"));
  }
  if !issetUserInfo{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserInfo is not set"));
  }
  if !issetSearchCondition{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SearchCondition is not set"));
  }
  if !issetRoomOption{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomOption is not set"));
  }
  if !issetServerOptionJSON{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServerOptionJSON is not set"));
  }
  return nil
}

func (p *ReqRandomJoinRoomWithServerOption)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.ClientRequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *ReqRandomJoinRoomWithServerOption)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := protocol.CategoryId(v)
  p.CategoryID = temp
}
  return nil
}

func (p *ReqRandomJoinRoomWithServerOption)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := protocol.Buffer(v)
  p.UserInfo = temp
}
  return nil
}

func (p *ReqRandomJoinRoomWithServerOption)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SearchCondition = v
}
  return nil
}

func (p *ReqRandomJoinRoomWithServerOption)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := protocol.Buffer(v)
  p.RoomOption = temp
}
  return nil
}

func (p *ReqRandomJoinRoomWithServerOption)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := protocol.Buffer(v)
  p.ServerOptionJSON = temp
}
  return nil
}

func (p *ReqRandomJoinRoomWithServerOption)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.AutoCreate = &v
}
  return nil
}

func (p *ReqRandomJoinRoomWithServerOption)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := RandomJoinRoomLatestRoomOpt(v)
  p.OptLatestRoom = &temp
}
  return nil
}

func (p *ReqRandomJoinRoomWithServerOption)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  temp := protocol.CategoryId(v)
  p.OptMinCategoryID = &temp
}
  return nil
}

func (p *ReqRandomJoinRoomWithServerOption)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.OptMinUserCount = &v
}
  return nil
}

func (p *ReqRandomJoinRoomWithServerOption) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReqRandomJoinRoomWithServerOption"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReqRandomJoinRoomWithServerOption) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *ReqRandomJoinRoomWithServerOption) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "category_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:category_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CategoryID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.category_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:category_id: ", p), err) }
  return err
}

func (p *ReqRandomJoinRoomWithServerOption) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_info", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:user_info: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.UserInfo); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_info (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:user_info: ", p), err) }
  return err
}

func (p *ReqRandomJoinRoomWithServerOption) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "search_condition", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:search_condition: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SearchCondition)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.search_condition (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:search_condition: ", p), err) }
  return err
}

func (p *ReqRandomJoinRoomWithServerOption) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "room_option", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:room_option: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.RoomOption); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.room_option (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:room_option: ", p), err) }
  return err
}

func (p *ReqRandomJoinRoomWithServerOption) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "server_option_json", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:server_option_json: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ServerOptionJSON); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.server_option_json (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:server_option_json: ", p), err) }
  return err
}

func (p *ReqRandomJoinRoomWithServerOption) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAutoCreate() {
    if err := oprot.WriteFieldBegin(ctx, "auto_create", thrift.BOOL, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:auto_create: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.AutoCreate)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.auto_create (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:auto_create: ", p), err) }
  }
  return err
}

func (p *ReqRandomJoinRoomWithServerOption) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetOptLatestRoom() {
    if err := oprot.WriteFieldBegin(ctx, "opt_latest_room", thrift.I32, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:opt_latest_room: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.OptLatestRoom)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.opt_latest_room (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:opt_latest_room: ", p), err) }
  }
  return err
}

func (p *ReqRandomJoinRoomWithServerOption) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetOptMinCategoryID() {
    if err := oprot.WriteFieldBegin(ctx, "opt_min_category_id", thrift.I32, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:opt_min_category_id: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.OptMinCategoryID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.opt_min_category_id (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:opt_min_category_id: ", p), err) }
  }
  return err
}

func (p *ReqRandomJoinRoomWithServerOption) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetOptMinUserCount() {
    if err := oprot.WriteFieldBegin(ctx, "opt_min_user_count", thrift.I32, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:opt_min_user_count: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.OptMinUserCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.opt_min_user_count (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:opt_min_user_count: ", p), err) }
  }
  return err
}

func (p *ReqRandomJoinRoomWithServerOption) Equals(other *ReqRandomJoinRoomWithServerOption) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if p.CategoryID != other.CategoryID { return false }
  if bytes.Compare(p.UserInfo, other.UserInfo) != 0 { return false }
  if p.SearchCondition != other.SearchCondition { return false }
  if bytes.Compare(p.RoomOption, other.RoomOption) != 0 { return false }
  if bytes.Compare(p.ServerOptionJSON, other.ServerOptionJSON) != 0 { return false }
  if p.AutoCreate != other.AutoCreate {
    if p.AutoCreate == nil || other.AutoCreate == nil {
      return false
    }
    if (*p.AutoCreate) != (*other.AutoCreate) { return false }
  }
  if p.OptLatestRoom != other.OptLatestRoom {
    if p.OptLatestRoom == nil || other.OptLatestRoom == nil {
      return false
    }
    if (*p.OptLatestRoom) != (*other.OptLatestRoom) { return false }
  }
  if p.OptMinCategoryID != other.OptMinCategoryID {
    if p.OptMinCategoryID == nil || other.OptMinCategoryID == nil {
      return false
    }
    if (*p.OptMinCategoryID) != (*other.OptMinCategoryID) { return false }
  }
  if p.OptMinUserCount != other.OptMinUserCount {
    if p.OptMinUserCount == nil || other.OptMinUserCount == nil {
      return false
    }
    if (*p.OptMinUserCount) != (*other.OptMinUserCount) { return false }
  }
  return true
}

func (p *ReqRandomJoinRoomWithServerOption) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReqRandomJoinRoomWithServerOption(%+v)", *p)
}

func (p *ReqRandomJoinRoomWithServerOption) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
type ReqLeaveRoom struct {
  RequestKey protocol.ClientRequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
}

func NewReqLeaveRoom() *ReqLeaveRoom {
  return &ReqLeaveRoom{}
}


func (p *ReqLeaveRoom) GetRequestKey() protocol.ClientRequestKey {
  return p.RequestKey
}
func (p *ReqLeaveRoom) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  return nil
}

func (p *ReqLeaveRoom)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.ClientRequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *ReqLeaveRoom) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReqLeaveRoom"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReqLeaveRoom) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *ReqLeaveRoom) Equals(other *ReqLeaveRoom) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  return true
}

func (p *ReqLeaveRoom) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReqLeaveRoom(%+v)", *p)
}

func (p *ReqLeaveRoom) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - TimeStamp
type Ping struct {
  RequestKey protocol.ClientRequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  TimeStamp int64 `thrift:"time_stamp,2,required" db:"time_stamp" json:"time_stamp"`
}

func NewPing() *Ping {
  return &Ping{}
}


func (p *Ping) GetRequestKey() protocol.ClientRequestKey {
  return p.RequestKey
}

func (p *Ping) GetTimeStamp() int64 {
  return p.TimeStamp
}
func (p *Ping) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetTimeStamp bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetTimeStamp = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetTimeStamp{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TimeStamp is not set"));
  }
  return nil
}

func (p *Ping)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.ClientRequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *Ping)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TimeStamp = v
}
  return nil
}

func (p *Ping) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Ping"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Ping) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *Ping) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "time_stamp", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:time_stamp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TimeStamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.time_stamp (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:time_stamp: ", p), err) }
  return err
}

func (p *Ping) Equals(other *Ping) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if p.TimeStamp != other.TimeStamp { return false }
  return true
}

func (p *Ping) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Ping(%+v)", *p)
}

func (p *Ping) Validate() error {
  return nil
}
// Attributes:
//  - PauseTimeSec
type NtfPause struct {
  PauseTimeSec int32 `thrift:"pause_time_sec,1,required" db:"pause_time_sec" json:"pause_time_sec"`
}

func NewNtfPause() *NtfPause {
  return &NtfPause{}
}


func (p *NtfPause) GetPauseTimeSec() int32 {
  return p.PauseTimeSec
}
func (p *NtfPause) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPauseTimeSec bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetPauseTimeSec = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPauseTimeSec{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PauseTimeSec is not set"));
  }
  return nil
}

func (p *NtfPause)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PauseTimeSec = v
}
  return nil
}

func (p *NtfPause) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "NtfPause"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NtfPause) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pause_time_sec", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pause_time_sec: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PauseTimeSec)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pause_time_sec (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pause_time_sec: ", p), err) }
  return err
}

func (p *NtfPause) Equals(other *NtfPause) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.PauseTimeSec != other.PauseTimeSec { return false }
  return true
}

func (p *NtfPause) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NtfPause(%+v)", *p)
}

func (p *NtfPause) Validate() error {
  return nil
}
type NtfResume struct {
}

func NewNtfResume() *NtfResume {
  return &NtfResume{}
}

func (p *NtfResume) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NtfResume) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "NtfResume"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NtfResume) Equals(other *NtfResume) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *NtfResume) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NtfResume(%+v)", *p)
}

func (p *NtfResume) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - SearchCondition
type ReqRoomList struct {
  RequestKey protocol.ClientRequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  SearchCondition string `thrift:"search_condition,2,required" db:"search_condition" json:"search_condition"`
}

func NewReqRoomList() *ReqRoomList {
  return &ReqRoomList{}
}


func (p *ReqRoomList) GetRequestKey() protocol.ClientRequestKey {
  return p.RequestKey
}

func (p *ReqRoomList) GetSearchCondition() string {
  return p.SearchCondition
}
func (p *ReqRoomList) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetSearchCondition bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetSearchCondition = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetSearchCondition{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SearchCondition is not set"));
  }
  return nil
}

func (p *ReqRoomList)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.ClientRequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *ReqRoomList)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SearchCondition = v
}
  return nil
}

func (p *ReqRoomList) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReqRoomList"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReqRoomList) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *ReqRoomList) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "search_condition", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:search_condition: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SearchCondition)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.search_condition (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:search_condition: ", p), err) }
  return err
}

func (p *ReqRoomList) Equals(other *ReqRoomList) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if p.SearchCondition != other.SearchCondition { return false }
  return true
}

func (p *ReqRoomList) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReqRoomList(%+v)", *p)
}

func (p *ReqRoomList) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - CategoryID
type ReqChangeLobby struct {
  RequestKey protocol.ClientRequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  CategoryID protocol.CategoryId `thrift:"category_id,2,required" db:"category_id" json:"category_id"`
}

func NewReqChangeLobby() *ReqChangeLobby {
  return &ReqChangeLobby{}
}


func (p *ReqChangeLobby) GetRequestKey() protocol.ClientRequestKey {
  return p.RequestKey
}

func (p *ReqChangeLobby) GetCategoryID() protocol.CategoryId {
  return p.CategoryID
}
func (p *ReqChangeLobby) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetCategoryID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetCategoryID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetCategoryID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CategoryID is not set"));
  }
  return nil
}

func (p *ReqChangeLobby)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.ClientRequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *ReqChangeLobby)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := protocol.CategoryId(v)
  p.CategoryID = temp
}
  return nil
}

func (p *ReqChangeLobby) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReqChangeLobby"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReqChangeLobby) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *ReqChangeLobby) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "category_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:category_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CategoryID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.category_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:category_id: ", p), err) }
  return err
}

func (p *ReqChangeLobby) Equals(other *ReqChangeLobby) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if p.CategoryID != other.CategoryID { return false }
  return true
}

func (p *ReqChangeLobby) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReqChangeLobby(%+v)", *p)
}

func (p *ReqChangeLobby) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - CategoryID
//  - TnmtSrl
//  - Hci
//  - StoreType
//  - UserInfo
//  - RoomOption
//  - LimitUserCount
type ReqJoinTnmt struct {
  RequestKey protocol.ClientRequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  CategoryID protocol.CategoryId `thrift:"category_id,2,required" db:"category_id" json:"category_id"`
  TnmtSrl protocol.TnmtSrl `thrift:"tnmt_srl,3,required" db:"tnmt_srl" json:"tnmt_srl"`
  Hci string `thrift:"hci,4,required" db:"hci" json:"hci"`
  StoreType string `thrift:"store_type,5,required" db:"store_type" json:"store_type"`
  UserInfo protocol.Buffer `thrift:"user_info,6,required" db:"user_info" json:"user_info"`
  RoomOption protocol.Buffer `thrift:"room_option,7,required" db:"room_option" json:"room_option"`
  LimitUserCount int32 `thrift:"limit_user_count,8,required" db:"limit_user_count" json:"limit_user_count"`
}

func NewReqJoinTnmt() *ReqJoinTnmt {
  return &ReqJoinTnmt{}
}


func (p *ReqJoinTnmt) GetRequestKey() protocol.ClientRequestKey {
  return p.RequestKey
}

func (p *ReqJoinTnmt) GetCategoryID() protocol.CategoryId {
  return p.CategoryID
}

func (p *ReqJoinTnmt) GetTnmtSrl() protocol.TnmtSrl {
  return p.TnmtSrl
}

func (p *ReqJoinTnmt) GetHci() string {
  return p.Hci
}

func (p *ReqJoinTnmt) GetStoreType() string {
  return p.StoreType
}

func (p *ReqJoinTnmt) GetUserInfo() protocol.Buffer {
  return p.UserInfo
}

func (p *ReqJoinTnmt) GetRoomOption() protocol.Buffer {
  return p.RoomOption
}

func (p *ReqJoinTnmt) GetLimitUserCount() int32 {
  return p.LimitUserCount
}
func (p *ReqJoinTnmt) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetCategoryID bool = false;
  var issetTnmtSrl bool = false;
  var issetHci bool = false;
  var issetStoreType bool = false;
  var issetUserInfo bool = false;
  var issetRoomOption bool = false;
  var issetLimitUserCount bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetCategoryID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetTnmtSrl = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetHci = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetStoreType = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
        issetUserInfo = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
        issetRoomOption = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
        issetLimitUserCount = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetCategoryID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CategoryID is not set"));
  }
  if !issetTnmtSrl{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TnmtSrl is not set"));
  }
  if !issetHci{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Hci is not set"));
  }
  if !issetStoreType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StoreType is not set"));
  }
  if !issetUserInfo{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserInfo is not set"));
  }
  if !issetRoomOption{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomOption is not set"));
  }
  if !issetLimitUserCount{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LimitUserCount is not set"));
  }
  return nil
}

func (p *ReqJoinTnmt)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.ClientRequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *ReqJoinTnmt)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := protocol.CategoryId(v)
  p.CategoryID = temp
}
  return nil
}

func (p *ReqJoinTnmt)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := protocol.TnmtSrl(v)
  p.TnmtSrl = temp
}
  return nil
}

func (p *ReqJoinTnmt)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Hci = v
}
  return nil
}

func (p *ReqJoinTnmt)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.StoreType = v
}
  return nil
}

func (p *ReqJoinTnmt)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := protocol.Buffer(v)
  p.UserInfo = temp
}
  return nil
}

func (p *ReqJoinTnmt)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := protocol.Buffer(v)
  p.RoomOption = temp
}
  return nil
}

func (p *ReqJoinTnmt)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.LimitUserCount = v
}
  return nil
}

func (p *ReqJoinTnmt) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReqJoinTnmt"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReqJoinTnmt) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *ReqJoinTnmt) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "category_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:category_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CategoryID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.category_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:category_id: ", p), err) }
  return err
}

func (p *ReqJoinTnmt) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tnmt_srl", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tnmt_srl: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TnmtSrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tnmt_srl (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tnmt_srl: ", p), err) }
  return err
}

func (p *ReqJoinTnmt) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hci", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:hci: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Hci)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hci (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:hci: ", p), err) }
  return err
}

func (p *ReqJoinTnmt) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "store_type", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:store_type: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.StoreType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.store_type (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:store_type: ", p), err) }
  return err
}

func (p *ReqJoinTnmt) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_info", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:user_info: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.UserInfo); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_info (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:user_info: ", p), err) }
  return err
}

func (p *ReqJoinTnmt) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "room_option", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:room_option: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.RoomOption); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.room_option (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:room_option: ", p), err) }
  return err
}

func (p *ReqJoinTnmt) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "limit_user_count", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:limit_user_count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.LimitUserCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit_user_count (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:limit_user_count: ", p), err) }
  return err
}

func (p *ReqJoinTnmt) Equals(other *ReqJoinTnmt) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if p.CategoryID != other.CategoryID { return false }
  if p.TnmtSrl != other.TnmtSrl { return false }
  if p.Hci != other.Hci { return false }
  if p.StoreType != other.StoreType { return false }
  if bytes.Compare(p.UserInfo, other.UserInfo) != 0 { return false }
  if bytes.Compare(p.RoomOption, other.RoomOption) != 0 { return false }
  if p.LimitUserCount != other.LimitUserCount { return false }
  return true
}

func (p *ReqJoinTnmt) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReqJoinTnmt(%+v)", *p)
}

func (p *ReqJoinTnmt) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - CategoryID
//  - TnmtSrl
//  - ResetLocation
//  - Exit
type ReqLeaveTnmt struct {
  RequestKey protocol.ClientRequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  CategoryID protocol.CategoryId `thrift:"category_id,2,required" db:"category_id" json:"category_id"`
  TnmtSrl protocol.TnmtSrl `thrift:"tnmt_srl,3,required" db:"tnmt_srl" json:"tnmt_srl"`
  ResetLocation bool `thrift:"reset_location,4,required" db:"reset_location" json:"reset_location"`
  Exit bool `thrift:"exit,5,required" db:"exit" json:"exit"`
}

func NewReqLeaveTnmt() *ReqLeaveTnmt {
  return &ReqLeaveTnmt{}
}


func (p *ReqLeaveTnmt) GetRequestKey() protocol.ClientRequestKey {
  return p.RequestKey
}

func (p *ReqLeaveTnmt) GetCategoryID() protocol.CategoryId {
  return p.CategoryID
}

func (p *ReqLeaveTnmt) GetTnmtSrl() protocol.TnmtSrl {
  return p.TnmtSrl
}

func (p *ReqLeaveTnmt) GetResetLocation() bool {
  return p.ResetLocation
}

func (p *ReqLeaveTnmt) GetExit() bool {
  return p.Exit
}
func (p *ReqLeaveTnmt) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetCategoryID bool = false;
  var issetTnmtSrl bool = false;
  var issetResetLocation bool = false;
  var issetExit bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetCategoryID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetTnmtSrl = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetResetLocation = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetExit = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetCategoryID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CategoryID is not set"));
  }
  if !issetTnmtSrl{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TnmtSrl is not set"));
  }
  if !issetResetLocation{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ResetLocation is not set"));
  }
  if !issetExit{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Exit is not set"));
  }
  return nil
}

func (p *ReqLeaveTnmt)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.ClientRequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *ReqLeaveTnmt)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := protocol.CategoryId(v)
  p.CategoryID = temp
}
  return nil
}

func (p *ReqLeaveTnmt)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := protocol.TnmtSrl(v)
  p.TnmtSrl = temp
}
  return nil
}

func (p *ReqLeaveTnmt)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ResetLocation = v
}
  return nil
}

func (p *ReqLeaveTnmt)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Exit = v
}
  return nil
}

func (p *ReqLeaveTnmt) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReqLeaveTnmt"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReqLeaveTnmt) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *ReqLeaveTnmt) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "category_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:category_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CategoryID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.category_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:category_id: ", p), err) }
  return err
}

func (p *ReqLeaveTnmt) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tnmt_srl", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tnmt_srl: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TnmtSrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tnmt_srl (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tnmt_srl: ", p), err) }
  return err
}

func (p *ReqLeaveTnmt) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reset_location", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:reset_location: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.ResetLocation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reset_location (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:reset_location: ", p), err) }
  return err
}

func (p *ReqLeaveTnmt) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "exit", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:exit: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Exit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.exit (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:exit: ", p), err) }
  return err
}

func (p *ReqLeaveTnmt) Equals(other *ReqLeaveTnmt) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if p.CategoryID != other.CategoryID { return false }
  if p.TnmtSrl != other.TnmtSrl { return false }
  if p.ResetLocation != other.ResetLocation { return false }
  if p.Exit != other.Exit { return false }
  return true
}

func (p *ReqLeaveTnmt) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReqLeaveTnmt(%+v)", *p)
}

func (p *ReqLeaveTnmt) Validate() error {
  return nil
}
