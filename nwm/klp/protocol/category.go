// Code generated by Thrift Compiler (0.19.0). DO NOT EDIT.

package protocol

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

type MessageCategory int64
const (
  MessageCategory_kClientToUserGateway MessageCategory = 1
  MessageCategory_kUserGatewayToClient MessageCategory = 2
  MessageCategory_kClientToLobby MessageCategory = 3
  MessageCategory_kLobbyToClient MessageCategory = 4
  MessageCategory_kClientToRoom MessageCategory = 5
  MessageCategory_kRoomToClient MessageCategory = 6
  MessageCategory_kClientToWebGateway MessageCategory = 7
  MessageCategory_kWebGatewayToClient MessageCategory = 8
  MessageCategory_kClientToFriends MessageCategory = 9
  MessageCategory_kFriendsToClient MessageCategory = 10
  MessageCategory_kUserGatewayToRoom MessageCategory = 100
  MessageCategory_kRoomToUserGateway MessageCategory = 101
  MessageCategory_kUserGatewayToLobby MessageCategory = 102
  MessageCategory_kLobbyToUserGateway MessageCategory = 103
  MessageCategory_kToWebGateway MessageCategory = 104
  MessageCategory_kWebGatewayTo MessageCategory = 105
  MessageCategory_kToPresence MessageCategory = 106
  MessageCategory_kPresenceTo MessageCategory = 107
  MessageCategory_kToRoomManager MessageCategory = 108
  MessageCategory_kRoomManagerTo MessageCategory = 109
  MessageCategory_kToUserGateway MessageCategory = 110
  MessageCategory_kUserGatewayTo MessageCategory = 111
  MessageCategory_kContentsToContents MessageCategory = 112
  MessageCategory_kUserEvent MessageCategory = 113
  MessageCategory_kUserGatewayToFriends MessageCategory = 114
  MessageCategory_kFriendsToUserGateway MessageCategory = 115
  MessageCategory_kMk13 MessageCategory = 116
  MessageCategory_kApi MessageCategory = 117
  MessageCategory_kToTournament MessageCategory = 118
  MessageCategory_kTournamentTo MessageCategory = 119
  MessageCategory_kToKlpGateway MessageCategory = 120
  MessageCategory_kKlpGatewayTo MessageCategory = 121
)

func (p MessageCategory) String() string {
  switch p {
  case MessageCategory_kClientToUserGateway: return "kClientToUserGateway"
  case MessageCategory_kUserGatewayToClient: return "kUserGatewayToClient"
  case MessageCategory_kClientToLobby: return "kClientToLobby"
  case MessageCategory_kLobbyToClient: return "kLobbyToClient"
  case MessageCategory_kClientToRoom: return "kClientToRoom"
  case MessageCategory_kRoomToClient: return "kRoomToClient"
  case MessageCategory_kClientToWebGateway: return "kClientToWebGateway"
  case MessageCategory_kWebGatewayToClient: return "kWebGatewayToClient"
  case MessageCategory_kClientToFriends: return "kClientToFriends"
  case MessageCategory_kFriendsToClient: return "kFriendsToClient"
  case MessageCategory_kUserGatewayToRoom: return "kUserGatewayToRoom"
  case MessageCategory_kRoomToUserGateway: return "kRoomToUserGateway"
  case MessageCategory_kUserGatewayToLobby: return "kUserGatewayToLobby"
  case MessageCategory_kLobbyToUserGateway: return "kLobbyToUserGateway"
  case MessageCategory_kToWebGateway: return "kToWebGateway"
  case MessageCategory_kWebGatewayTo: return "kWebGatewayTo"
  case MessageCategory_kToPresence: return "kToPresence"
  case MessageCategory_kPresenceTo: return "kPresenceTo"
  case MessageCategory_kToRoomManager: return "kToRoomManager"
  case MessageCategory_kRoomManagerTo: return "kRoomManagerTo"
  case MessageCategory_kToUserGateway: return "kToUserGateway"
  case MessageCategory_kUserGatewayTo: return "kUserGatewayTo"
  case MessageCategory_kContentsToContents: return "kContentsToContents"
  case MessageCategory_kUserEvent: return "kUserEvent"
  case MessageCategory_kUserGatewayToFriends: return "kUserGatewayToFriends"
  case MessageCategory_kFriendsToUserGateway: return "kFriendsToUserGateway"
  case MessageCategory_kMk13: return "kMk13"
  case MessageCategory_kApi: return "kApi"
  case MessageCategory_kToTournament: return "kToTournament"
  case MessageCategory_kTournamentTo: return "kTournamentTo"
  case MessageCategory_kToKlpGateway: return "kToKlpGateway"
  case MessageCategory_kKlpGatewayTo: return "kKlpGatewayTo"
  }
  return "<UNSET>"
}

func MessageCategoryFromString(s string) (MessageCategory, error) {
  switch s {
  case "kClientToUserGateway": return MessageCategory_kClientToUserGateway, nil 
  case "kUserGatewayToClient": return MessageCategory_kUserGatewayToClient, nil 
  case "kClientToLobby": return MessageCategory_kClientToLobby, nil 
  case "kLobbyToClient": return MessageCategory_kLobbyToClient, nil 
  case "kClientToRoom": return MessageCategory_kClientToRoom, nil 
  case "kRoomToClient": return MessageCategory_kRoomToClient, nil 
  case "kClientToWebGateway": return MessageCategory_kClientToWebGateway, nil 
  case "kWebGatewayToClient": return MessageCategory_kWebGatewayToClient, nil 
  case "kClientToFriends": return MessageCategory_kClientToFriends, nil 
  case "kFriendsToClient": return MessageCategory_kFriendsToClient, nil 
  case "kUserGatewayToRoom": return MessageCategory_kUserGatewayToRoom, nil 
  case "kRoomToUserGateway": return MessageCategory_kRoomToUserGateway, nil 
  case "kUserGatewayToLobby": return MessageCategory_kUserGatewayToLobby, nil 
  case "kLobbyToUserGateway": return MessageCategory_kLobbyToUserGateway, nil 
  case "kToWebGateway": return MessageCategory_kToWebGateway, nil 
  case "kWebGatewayTo": return MessageCategory_kWebGatewayTo, nil 
  case "kToPresence": return MessageCategory_kToPresence, nil 
  case "kPresenceTo": return MessageCategory_kPresenceTo, nil 
  case "kToRoomManager": return MessageCategory_kToRoomManager, nil 
  case "kRoomManagerTo": return MessageCategory_kRoomManagerTo, nil 
  case "kToUserGateway": return MessageCategory_kToUserGateway, nil 
  case "kUserGatewayTo": return MessageCategory_kUserGatewayTo, nil 
  case "kContentsToContents": return MessageCategory_kContentsToContents, nil 
  case "kUserEvent": return MessageCategory_kUserEvent, nil 
  case "kUserGatewayToFriends": return MessageCategory_kUserGatewayToFriends, nil 
  case "kFriendsToUserGateway": return MessageCategory_kFriendsToUserGateway, nil 
  case "kMk13": return MessageCategory_kMk13, nil 
  case "kApi": return MessageCategory_kApi, nil 
  case "kToTournament": return MessageCategory_kToTournament, nil 
  case "kTournamentTo": return MessageCategory_kTournamentTo, nil 
  case "kToKlpGateway": return MessageCategory_kToKlpGateway, nil 
  case "kKlpGatewayTo": return MessageCategory_kKlpGatewayTo, nil 
  }
  return MessageCategory(0), fmt.Errorf("not a valid MessageCategory string")
}


func MessageCategoryPtr(v MessageCategory) *MessageCategory { return &v }

func (p MessageCategory) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *MessageCategory) UnmarshalText(text []byte) error {
q, err := MessageCategoryFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *MessageCategory) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = MessageCategory(v)
return nil
}

func (p * MessageCategory) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
