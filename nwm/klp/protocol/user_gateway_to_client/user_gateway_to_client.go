// Code generated by Thrift Compiler (0.19.0). DO NOT EDIT.

package user_gateway_to_client

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
	"github.com/hhcneo/klpProtocol/nwm/klp/protocol"
	"github.com/hhcneo/klpProtocol/nwm/klp/protocol/error"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

var _ = protocol.GoUnusedProtection__
var _ = error.GoUnusedProtection__
type MessageType int64
const (
  MessageType_kAnsVersion MessageType = 1
  MessageType_kAnsLogin MessageType = 2
  MessageType_kAnsLogout MessageType = 3
  MessageType_kErrorForwardMessage MessageType = 4
  MessageType_kPing MessageType = 5
  MessageType_kAnsCreateAndJoinRoom MessageType = 6
  MessageType_kAnsJoinRoom MessageType = 7
  MessageType_kAnsRandomJoinRoom MessageType = 8
  MessageType_kAnsLeaveRoom MessageType = 9
  MessageType_kNtfLeaveRoom MessageType = 10
  MessageType_kNtfLogout MessageType = 11
  MessageType_kForwardMessage MessageType = 12
  MessageType_kNtfLoginComplete MessageType = 13
  MessageType_kNtfNotice MessageType = 14
  MessageType_kNtfClientNetLibConfig MessageType = 15
  MessageType_kPong MessageType = 16
  MessageType_kAnsRoomList MessageType = 17
  MessageType_kAnsChangeLobby MessageType = 18
  MessageType_kAnsRandomJoinRoomWithServerOption MessageType = 19
  MessageType_kAnsJoinTnmt MessageType = 20
  MessageType_kAnsLeaveTnmt MessageType = 21
  MessageType_kNtfKLPGWMessage MessageType = 22
)

func (p MessageType) String() string {
  switch p {
  case MessageType_kAnsVersion: return "kAnsVersion"
  case MessageType_kAnsLogin: return "kAnsLogin"
  case MessageType_kAnsLogout: return "kAnsLogout"
  case MessageType_kErrorForwardMessage: return "kErrorForwardMessage"
  case MessageType_kPing: return "kPing"
  case MessageType_kAnsCreateAndJoinRoom: return "kAnsCreateAndJoinRoom"
  case MessageType_kAnsJoinRoom: return "kAnsJoinRoom"
  case MessageType_kAnsRandomJoinRoom: return "kAnsRandomJoinRoom"
  case MessageType_kAnsLeaveRoom: return "kAnsLeaveRoom"
  case MessageType_kNtfLeaveRoom: return "kNtfLeaveRoom"
  case MessageType_kNtfLogout: return "kNtfLogout"
  case MessageType_kForwardMessage: return "kForwardMessage"
  case MessageType_kNtfLoginComplete: return "kNtfLoginComplete"
  case MessageType_kNtfNotice: return "kNtfNotice"
  case MessageType_kNtfClientNetLibConfig: return "kNtfClientNetLibConfig"
  case MessageType_kPong: return "kPong"
  case MessageType_kAnsRoomList: return "kAnsRoomList"
  case MessageType_kAnsChangeLobby: return "kAnsChangeLobby"
  case MessageType_kAnsRandomJoinRoomWithServerOption: return "kAnsRandomJoinRoomWithServerOption"
  case MessageType_kAnsJoinTnmt: return "kAnsJoinTnmt"
  case MessageType_kAnsLeaveTnmt: return "kAnsLeaveTnmt"
  case MessageType_kNtfKLPGWMessage: return "kNtfKLPGWMessage"
  }
  return "<UNSET>"
}

func MessageTypeFromString(s string) (MessageType, error) {
  switch s {
  case "kAnsVersion": return MessageType_kAnsVersion, nil 
  case "kAnsLogin": return MessageType_kAnsLogin, nil 
  case "kAnsLogout": return MessageType_kAnsLogout, nil 
  case "kErrorForwardMessage": return MessageType_kErrorForwardMessage, nil 
  case "kPing": return MessageType_kPing, nil 
  case "kAnsCreateAndJoinRoom": return MessageType_kAnsCreateAndJoinRoom, nil 
  case "kAnsJoinRoom": return MessageType_kAnsJoinRoom, nil 
  case "kAnsRandomJoinRoom": return MessageType_kAnsRandomJoinRoom, nil 
  case "kAnsLeaveRoom": return MessageType_kAnsLeaveRoom, nil 
  case "kNtfLeaveRoom": return MessageType_kNtfLeaveRoom, nil 
  case "kNtfLogout": return MessageType_kNtfLogout, nil 
  case "kForwardMessage": return MessageType_kForwardMessage, nil 
  case "kNtfLoginComplete": return MessageType_kNtfLoginComplete, nil 
  case "kNtfNotice": return MessageType_kNtfNotice, nil 
  case "kNtfClientNetLibConfig": return MessageType_kNtfClientNetLibConfig, nil 
  case "kPong": return MessageType_kPong, nil 
  case "kAnsRoomList": return MessageType_kAnsRoomList, nil 
  case "kAnsChangeLobby": return MessageType_kAnsChangeLobby, nil 
  case "kAnsRandomJoinRoomWithServerOption": return MessageType_kAnsRandomJoinRoomWithServerOption, nil 
  case "kAnsJoinTnmt": return MessageType_kAnsJoinTnmt, nil 
  case "kAnsLeaveTnmt": return MessageType_kAnsLeaveTnmt, nil 
  case "kNtfKLPGWMessage": return MessageType_kNtfKLPGWMessage, nil 
  }
  return MessageType(0), fmt.Errorf("not a valid MessageType string")
}


func MessageTypePtr(v MessageType) *MessageType { return &v }

func (p MessageType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *MessageType) UnmarshalText(text []byte) error {
q, err := MessageTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *MessageType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = MessageType(v)
return nil
}

func (p * MessageType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - RequestKey
//  - Result_
//  - Ssn
//  - KlpProtocol
//  - KlpServer
//  - ContentsProtocol
//  - ContentsServer
type AnsVersion struct {
  RequestKey protocol.ClientRequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  Result_ *error.Error `thrift:"result,2,required" db:"result" json:"result"`
  Ssn protocol.Ssn `thrift:"ssn,3,required" db:"ssn" json:"ssn"`
  KlpProtocol int32 `thrift:"klp_protocol,4,required" db:"klp_protocol" json:"klp_protocol"`
  KlpServer int32 `thrift:"klp_server,5,required" db:"klp_server" json:"klp_server"`
  ContentsProtocol int32 `thrift:"contents_protocol,6,required" db:"contents_protocol" json:"contents_protocol"`
  ContentsServer int32 `thrift:"contents_server,7,required" db:"contents_server" json:"contents_server"`
}

func NewAnsVersion() *AnsVersion {
  return &AnsVersion{}
}


func (p *AnsVersion) GetRequestKey() protocol.ClientRequestKey {
  return p.RequestKey
}
var AnsVersion_Result__DEFAULT *error.Error
func (p *AnsVersion) GetResult_() *error.Error {
  if !p.IsSetResult_() {
    return AnsVersion_Result__DEFAULT
  }
return p.Result_
}

func (p *AnsVersion) GetSsn() protocol.Ssn {
  return p.Ssn
}

func (p *AnsVersion) GetKlpProtocol() int32 {
  return p.KlpProtocol
}

func (p *AnsVersion) GetKlpServer() int32 {
  return p.KlpServer
}

func (p *AnsVersion) GetContentsProtocol() int32 {
  return p.ContentsProtocol
}

func (p *AnsVersion) GetContentsServer() int32 {
  return p.ContentsServer
}
func (p *AnsVersion) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *AnsVersion) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetResult_ bool = false;
  var issetSsn bool = false;
  var issetKlpProtocol bool = false;
  var issetKlpServer bool = false;
  var issetContentsProtocol bool = false;
  var issetContentsServer bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetSsn = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetKlpProtocol = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetKlpServer = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
        issetContentsProtocol = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
        issetContentsServer = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  if !issetSsn{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ssn is not set"));
  }
  if !issetKlpProtocol{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field KlpProtocol is not set"));
  }
  if !issetKlpServer{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field KlpServer is not set"));
  }
  if !issetContentsProtocol{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ContentsProtocol is not set"));
  }
  if !issetContentsServer{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ContentsServer is not set"));
  }
  return nil
}

func (p *AnsVersion)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.ClientRequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *AnsVersion)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &error.Error{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *AnsVersion)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := protocol.Ssn(v)
  p.Ssn = temp
}
  return nil
}

func (p *AnsVersion)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.KlpProtocol = v
}
  return nil
}

func (p *AnsVersion)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.KlpServer = v
}
  return nil
}

func (p *AnsVersion)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ContentsProtocol = v
}
  return nil
}

func (p *AnsVersion)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ContentsServer = v
}
  return nil
}

func (p *AnsVersion) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AnsVersion"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnsVersion) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *AnsVersion) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:result: ", p), err) }
  return err
}

func (p *AnsVersion) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ssn", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ssn: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Ssn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ssn (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ssn: ", p), err) }
  return err
}

func (p *AnsVersion) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "klp_protocol", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:klp_protocol: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.KlpProtocol)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.klp_protocol (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:klp_protocol: ", p), err) }
  return err
}

func (p *AnsVersion) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "klp_server", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:klp_server: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.KlpServer)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.klp_server (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:klp_server: ", p), err) }
  return err
}

func (p *AnsVersion) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contents_protocol", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:contents_protocol: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ContentsProtocol)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contents_protocol (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:contents_protocol: ", p), err) }
  return err
}

func (p *AnsVersion) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contents_server", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:contents_server: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ContentsServer)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contents_server (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:contents_server: ", p), err) }
  return err
}

func (p *AnsVersion) Equals(other *AnsVersion) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if !p.Result_.Equals(other.Result_) { return false }
  if p.Ssn != other.Ssn { return false }
  if p.KlpProtocol != other.KlpProtocol { return false }
  if p.KlpServer != other.KlpServer { return false }
  if p.ContentsProtocol != other.ContentsProtocol { return false }
  if p.ContentsServer != other.ContentsServer { return false }
  return true
}

func (p *AnsVersion) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AnsVersion(%+v)", *p)
}

func (p *AnsVersion) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - Result_
//  - Gsn
//  - IP
//  - Port
//  - ContentsResult_
type AnsLogin struct {
  RequestKey protocol.ClientRequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  Result_ *error.Error `thrift:"result,2,required" db:"result" json:"result"`
  Gsn protocol.Gsn `thrift:"gsn,3,required" db:"gsn" json:"gsn"`
  IP string `thrift:"ip,4,required" db:"ip" json:"ip"`
  Port int32 `thrift:"port,5,required" db:"port" json:"port"`
  ContentsResult_ string `thrift:"contents_result,6,required" db:"contents_result" json:"contents_result"`
}

func NewAnsLogin() *AnsLogin {
  return &AnsLogin{}
}


func (p *AnsLogin) GetRequestKey() protocol.ClientRequestKey {
  return p.RequestKey
}
var AnsLogin_Result__DEFAULT *error.Error
func (p *AnsLogin) GetResult_() *error.Error {
  if !p.IsSetResult_() {
    return AnsLogin_Result__DEFAULT
  }
return p.Result_
}

func (p *AnsLogin) GetGsn() protocol.Gsn {
  return p.Gsn
}

func (p *AnsLogin) GetIP() string {
  return p.IP
}

func (p *AnsLogin) GetPort() int32 {
  return p.Port
}

func (p *AnsLogin) GetContentsResult_() string {
  return p.ContentsResult_
}
func (p *AnsLogin) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *AnsLogin) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetResult_ bool = false;
  var issetGsn bool = false;
  var issetIP bool = false;
  var issetPort bool = false;
  var issetContentsResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetGsn = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetIP = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetPort = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
        issetContentsResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  if !issetGsn{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Gsn is not set"));
  }
  if !issetIP{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IP is not set"));
  }
  if !issetPort{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Port is not set"));
  }
  if !issetContentsResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ContentsResult_ is not set"));
  }
  return nil
}

func (p *AnsLogin)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.ClientRequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *AnsLogin)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &error.Error{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *AnsLogin)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := protocol.Gsn(v)
  p.Gsn = temp
}
  return nil
}

func (p *AnsLogin)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IP = v
}
  return nil
}

func (p *AnsLogin)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Port = v
}
  return nil
}

func (p *AnsLogin)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ContentsResult_ = v
}
  return nil
}

func (p *AnsLogin) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AnsLogin"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnsLogin) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *AnsLogin) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:result: ", p), err) }
  return err
}

func (p *AnsLogin) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "gsn", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gsn: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Gsn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gsn (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gsn: ", p), err) }
  return err
}

func (p *AnsLogin) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ip", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ip: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.IP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ip (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ip: ", p), err) }
  return err
}

func (p *AnsLogin) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "port", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:port: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Port)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.port (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:port: ", p), err) }
  return err
}

func (p *AnsLogin) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contents_result", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:contents_result: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ContentsResult_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contents_result (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:contents_result: ", p), err) }
  return err
}

func (p *AnsLogin) Equals(other *AnsLogin) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if !p.Result_.Equals(other.Result_) { return false }
  if p.Gsn != other.Gsn { return false }
  if p.IP != other.IP { return false }
  if p.Port != other.Port { return false }
  if p.ContentsResult_ != other.ContentsResult_ { return false }
  return true
}

func (p *AnsLogin) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AnsLogin(%+v)", *p)
}

func (p *AnsLogin) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - Result_
type AnsLogout struct {
  RequestKey protocol.ClientRequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  Result_ *error.Error `thrift:"result,2,required" db:"result" json:"result"`
}

func NewAnsLogout() *AnsLogout {
  return &AnsLogout{}
}


func (p *AnsLogout) GetRequestKey() protocol.ClientRequestKey {
  return p.RequestKey
}
var AnsLogout_Result__DEFAULT *error.Error
func (p *AnsLogout) GetResult_() *error.Error {
  if !p.IsSetResult_() {
    return AnsLogout_Result__DEFAULT
  }
return p.Result_
}
func (p *AnsLogout) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *AnsLogout) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *AnsLogout)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.ClientRequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *AnsLogout)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &error.Error{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *AnsLogout) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AnsLogout"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnsLogout) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *AnsLogout) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:result: ", p), err) }
  return err
}

func (p *AnsLogout) Equals(other *AnsLogout) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if !p.Result_.Equals(other.Result_) { return false }
  return true
}

func (p *AnsLogout) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AnsLogout(%+v)", *p)
}

func (p *AnsLogout) Validate() error {
  return nil
}
// Attributes:
//  - Result_
//  - ServerType
//  - EnvelopedMessage
type ErrorForwardMessage struct {
  Result_ *error.Error `thrift:"result,1,required" db:"result" json:"result"`
  ServerType protocol.ServerType `thrift:"server_type,2,required" db:"server_type" json:"server_type"`
  EnvelopedMessage protocol.KlpProtocolBuffer `thrift:"enveloped_message,3,required" db:"enveloped_message" json:"enveloped_message"`
}

func NewErrorForwardMessage() *ErrorForwardMessage {
  return &ErrorForwardMessage{}
}

var ErrorForwardMessage_Result__DEFAULT *error.Error
func (p *ErrorForwardMessage) GetResult_() *error.Error {
  if !p.IsSetResult_() {
    return ErrorForwardMessage_Result__DEFAULT
  }
return p.Result_
}

func (p *ErrorForwardMessage) GetServerType() protocol.ServerType {
  return p.ServerType
}

func (p *ErrorForwardMessage) GetEnvelopedMessage() protocol.KlpProtocolBuffer {
  return p.EnvelopedMessage
}
func (p *ErrorForwardMessage) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *ErrorForwardMessage) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetResult_ bool = false;
  var issetServerType bool = false;
  var issetEnvelopedMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetServerType = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetEnvelopedMessage = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  if !issetServerType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServerType is not set"));
  }
  if !issetEnvelopedMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EnvelopedMessage is not set"));
  }
  return nil
}

func (p *ErrorForwardMessage)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &error.Error{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *ErrorForwardMessage)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := protocol.ServerType(v)
  p.ServerType = temp
}
  return nil
}

func (p *ErrorForwardMessage)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := protocol.KlpProtocolBuffer(v)
  p.EnvelopedMessage = temp
}
  return nil
}

func (p *ErrorForwardMessage) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ErrorForwardMessage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ErrorForwardMessage) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:result: ", p), err) }
  return err
}

func (p *ErrorForwardMessage) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "server_type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:server_type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ServerType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.server_type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:server_type: ", p), err) }
  return err
}

func (p *ErrorForwardMessage) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "enveloped_message", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:enveloped_message: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.EnvelopedMessage); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enveloped_message (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:enveloped_message: ", p), err) }
  return err
}

func (p *ErrorForwardMessage) Equals(other *ErrorForwardMessage) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Result_.Equals(other.Result_) { return false }
  if p.ServerType != other.ServerType { return false }
  if bytes.Compare(p.EnvelopedMessage, other.EnvelopedMessage) != 0 { return false }
  return true
}

func (p *ErrorForwardMessage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ErrorForwardMessage(%+v)", *p)
}

func (p *ErrorForwardMessage) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - TimeStamp
type Ping struct {
  RequestKey protocol.ClientRequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  TimeStamp int64 `thrift:"time_stamp,2,required" db:"time_stamp" json:"time_stamp"`
}

func NewPing() *Ping {
  return &Ping{}
}


func (p *Ping) GetRequestKey() protocol.ClientRequestKey {
  return p.RequestKey
}

func (p *Ping) GetTimeStamp() int64 {
  return p.TimeStamp
}
func (p *Ping) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetTimeStamp bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetTimeStamp = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetTimeStamp{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TimeStamp is not set"));
  }
  return nil
}

func (p *Ping)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.ClientRequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *Ping)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TimeStamp = v
}
  return nil
}

func (p *Ping) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Ping"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Ping) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *Ping) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "time_stamp", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:time_stamp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TimeStamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.time_stamp (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:time_stamp: ", p), err) }
  return err
}

func (p *Ping) Equals(other *Ping) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if p.TimeStamp != other.TimeStamp { return false }
  return true
}

func (p *Ping) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Ping(%+v)", *p)
}

func (p *Ping) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - Result_
//  - CategoryID
//  - RoomID
//  - ContentsErrorCode
type AnsCreateAndJoinRoom struct {
  RequestKey protocol.ClientRequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  Result_ *error.Error `thrift:"result,2,required" db:"result" json:"result"`
  CategoryID protocol.CategoryId `thrift:"category_id,3,required" db:"category_id" json:"category_id"`
  RoomID protocol.RoomId `thrift:"room_id,4,required" db:"room_id" json:"room_id"`
  ContentsErrorCode *int32 `thrift:"contents_error_code,5" db:"contents_error_code" json:"contents_error_code,omitempty"`
}

func NewAnsCreateAndJoinRoom() *AnsCreateAndJoinRoom {
  return &AnsCreateAndJoinRoom{}
}


func (p *AnsCreateAndJoinRoom) GetRequestKey() protocol.ClientRequestKey {
  return p.RequestKey
}
var AnsCreateAndJoinRoom_Result__DEFAULT *error.Error
func (p *AnsCreateAndJoinRoom) GetResult_() *error.Error {
  if !p.IsSetResult_() {
    return AnsCreateAndJoinRoom_Result__DEFAULT
  }
return p.Result_
}

func (p *AnsCreateAndJoinRoom) GetCategoryID() protocol.CategoryId {
  return p.CategoryID
}

func (p *AnsCreateAndJoinRoom) GetRoomID() protocol.RoomId {
  return p.RoomID
}
var AnsCreateAndJoinRoom_ContentsErrorCode_DEFAULT int32
func (p *AnsCreateAndJoinRoom) GetContentsErrorCode() int32 {
  if !p.IsSetContentsErrorCode() {
    return AnsCreateAndJoinRoom_ContentsErrorCode_DEFAULT
  }
return *p.ContentsErrorCode
}
func (p *AnsCreateAndJoinRoom) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *AnsCreateAndJoinRoom) IsSetContentsErrorCode() bool {
  return p.ContentsErrorCode != nil
}

func (p *AnsCreateAndJoinRoom) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetResult_ bool = false;
  var issetCategoryID bool = false;
  var issetRoomID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetCategoryID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetRoomID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  if !issetCategoryID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CategoryID is not set"));
  }
  if !issetRoomID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomID is not set"));
  }
  return nil
}

func (p *AnsCreateAndJoinRoom)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.ClientRequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *AnsCreateAndJoinRoom)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &error.Error{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *AnsCreateAndJoinRoom)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := protocol.CategoryId(v)
  p.CategoryID = temp
}
  return nil
}

func (p *AnsCreateAndJoinRoom)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := protocol.RoomId(v)
  p.RoomID = temp
}
  return nil
}

func (p *AnsCreateAndJoinRoom)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ContentsErrorCode = &v
}
  return nil
}

func (p *AnsCreateAndJoinRoom) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AnsCreateAndJoinRoom"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnsCreateAndJoinRoom) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *AnsCreateAndJoinRoom) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:result: ", p), err) }
  return err
}

func (p *AnsCreateAndJoinRoom) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "category_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:category_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CategoryID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.category_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:category_id: ", p), err) }
  return err
}

func (p *AnsCreateAndJoinRoom) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "room_id", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:room_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RoomID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.room_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:room_id: ", p), err) }
  return err
}

func (p *AnsCreateAndJoinRoom) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetContentsErrorCode() {
    if err := oprot.WriteFieldBegin(ctx, "contents_error_code", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:contents_error_code: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.ContentsErrorCode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.contents_error_code (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:contents_error_code: ", p), err) }
  }
  return err
}

func (p *AnsCreateAndJoinRoom) Equals(other *AnsCreateAndJoinRoom) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if !p.Result_.Equals(other.Result_) { return false }
  if p.CategoryID != other.CategoryID { return false }
  if p.RoomID != other.RoomID { return false }
  if p.ContentsErrorCode != other.ContentsErrorCode {
    if p.ContentsErrorCode == nil || other.ContentsErrorCode == nil {
      return false
    }
    if (*p.ContentsErrorCode) != (*other.ContentsErrorCode) { return false }
  }
  return true
}

func (p *AnsCreateAndJoinRoom) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AnsCreateAndJoinRoom(%+v)", *p)
}

func (p *AnsCreateAndJoinRoom) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - Result_
//  - CategoryID
//  - RoomID
//  - ContentsErrorCode
type AnsJoinRoom struct {
  RequestKey protocol.ClientRequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  Result_ *error.Error `thrift:"result,2,required" db:"result" json:"result"`
  CategoryID protocol.CategoryId `thrift:"category_id,3,required" db:"category_id" json:"category_id"`
  RoomID protocol.RoomId `thrift:"room_id,4,required" db:"room_id" json:"room_id"`
  ContentsErrorCode *int32 `thrift:"contents_error_code,5" db:"contents_error_code" json:"contents_error_code,omitempty"`
}

func NewAnsJoinRoom() *AnsJoinRoom {
  return &AnsJoinRoom{}
}


func (p *AnsJoinRoom) GetRequestKey() protocol.ClientRequestKey {
  return p.RequestKey
}
var AnsJoinRoom_Result__DEFAULT *error.Error
func (p *AnsJoinRoom) GetResult_() *error.Error {
  if !p.IsSetResult_() {
    return AnsJoinRoom_Result__DEFAULT
  }
return p.Result_
}

func (p *AnsJoinRoom) GetCategoryID() protocol.CategoryId {
  return p.CategoryID
}

func (p *AnsJoinRoom) GetRoomID() protocol.RoomId {
  return p.RoomID
}
var AnsJoinRoom_ContentsErrorCode_DEFAULT int32
func (p *AnsJoinRoom) GetContentsErrorCode() int32 {
  if !p.IsSetContentsErrorCode() {
    return AnsJoinRoom_ContentsErrorCode_DEFAULT
  }
return *p.ContentsErrorCode
}
func (p *AnsJoinRoom) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *AnsJoinRoom) IsSetContentsErrorCode() bool {
  return p.ContentsErrorCode != nil
}

func (p *AnsJoinRoom) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetResult_ bool = false;
  var issetCategoryID bool = false;
  var issetRoomID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetCategoryID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetRoomID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  if !issetCategoryID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CategoryID is not set"));
  }
  if !issetRoomID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomID is not set"));
  }
  return nil
}

func (p *AnsJoinRoom)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.ClientRequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *AnsJoinRoom)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &error.Error{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *AnsJoinRoom)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := protocol.CategoryId(v)
  p.CategoryID = temp
}
  return nil
}

func (p *AnsJoinRoom)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := protocol.RoomId(v)
  p.RoomID = temp
}
  return nil
}

func (p *AnsJoinRoom)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ContentsErrorCode = &v
}
  return nil
}

func (p *AnsJoinRoom) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AnsJoinRoom"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnsJoinRoom) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *AnsJoinRoom) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:result: ", p), err) }
  return err
}

func (p *AnsJoinRoom) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "category_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:category_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CategoryID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.category_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:category_id: ", p), err) }
  return err
}

func (p *AnsJoinRoom) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "room_id", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:room_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RoomID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.room_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:room_id: ", p), err) }
  return err
}

func (p *AnsJoinRoom) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetContentsErrorCode() {
    if err := oprot.WriteFieldBegin(ctx, "contents_error_code", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:contents_error_code: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.ContentsErrorCode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.contents_error_code (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:contents_error_code: ", p), err) }
  }
  return err
}

func (p *AnsJoinRoom) Equals(other *AnsJoinRoom) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if !p.Result_.Equals(other.Result_) { return false }
  if p.CategoryID != other.CategoryID { return false }
  if p.RoomID != other.RoomID { return false }
  if p.ContentsErrorCode != other.ContentsErrorCode {
    if p.ContentsErrorCode == nil || other.ContentsErrorCode == nil {
      return false
    }
    if (*p.ContentsErrorCode) != (*other.ContentsErrorCode) { return false }
  }
  return true
}

func (p *AnsJoinRoom) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AnsJoinRoom(%+v)", *p)
}

func (p *AnsJoinRoom) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - Result_
//  - CategoryID
//  - RoomID
//  - ContentsErrorCode
type AnsRandomJoinRoomWithServerOption struct {
  RequestKey protocol.ClientRequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  Result_ *error.Error `thrift:"result,2,required" db:"result" json:"result"`
  CategoryID protocol.CategoryId `thrift:"category_id,3,required" db:"category_id" json:"category_id"`
  RoomID protocol.RoomId `thrift:"room_id,4,required" db:"room_id" json:"room_id"`
  ContentsErrorCode *int32 `thrift:"contents_error_code,5" db:"contents_error_code" json:"contents_error_code,omitempty"`
}

func NewAnsRandomJoinRoomWithServerOption() *AnsRandomJoinRoomWithServerOption {
  return &AnsRandomJoinRoomWithServerOption{}
}


func (p *AnsRandomJoinRoomWithServerOption) GetRequestKey() protocol.ClientRequestKey {
  return p.RequestKey
}
var AnsRandomJoinRoomWithServerOption_Result__DEFAULT *error.Error
func (p *AnsRandomJoinRoomWithServerOption) GetResult_() *error.Error {
  if !p.IsSetResult_() {
    return AnsRandomJoinRoomWithServerOption_Result__DEFAULT
  }
return p.Result_
}

func (p *AnsRandomJoinRoomWithServerOption) GetCategoryID() protocol.CategoryId {
  return p.CategoryID
}

func (p *AnsRandomJoinRoomWithServerOption) GetRoomID() protocol.RoomId {
  return p.RoomID
}
var AnsRandomJoinRoomWithServerOption_ContentsErrorCode_DEFAULT int32
func (p *AnsRandomJoinRoomWithServerOption) GetContentsErrorCode() int32 {
  if !p.IsSetContentsErrorCode() {
    return AnsRandomJoinRoomWithServerOption_ContentsErrorCode_DEFAULT
  }
return *p.ContentsErrorCode
}
func (p *AnsRandomJoinRoomWithServerOption) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *AnsRandomJoinRoomWithServerOption) IsSetContentsErrorCode() bool {
  return p.ContentsErrorCode != nil
}

func (p *AnsRandomJoinRoomWithServerOption) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetResult_ bool = false;
  var issetCategoryID bool = false;
  var issetRoomID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetCategoryID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetRoomID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  if !issetCategoryID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CategoryID is not set"));
  }
  if !issetRoomID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomID is not set"));
  }
  return nil
}

func (p *AnsRandomJoinRoomWithServerOption)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.ClientRequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *AnsRandomJoinRoomWithServerOption)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &error.Error{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *AnsRandomJoinRoomWithServerOption)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := protocol.CategoryId(v)
  p.CategoryID = temp
}
  return nil
}

func (p *AnsRandomJoinRoomWithServerOption)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := protocol.RoomId(v)
  p.RoomID = temp
}
  return nil
}

func (p *AnsRandomJoinRoomWithServerOption)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ContentsErrorCode = &v
}
  return nil
}

func (p *AnsRandomJoinRoomWithServerOption) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AnsRandomJoinRoomWithServerOption"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnsRandomJoinRoomWithServerOption) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *AnsRandomJoinRoomWithServerOption) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:result: ", p), err) }
  return err
}

func (p *AnsRandomJoinRoomWithServerOption) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "category_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:category_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CategoryID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.category_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:category_id: ", p), err) }
  return err
}

func (p *AnsRandomJoinRoomWithServerOption) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "room_id", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:room_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RoomID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.room_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:room_id: ", p), err) }
  return err
}

func (p *AnsRandomJoinRoomWithServerOption) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetContentsErrorCode() {
    if err := oprot.WriteFieldBegin(ctx, "contents_error_code", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:contents_error_code: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.ContentsErrorCode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.contents_error_code (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:contents_error_code: ", p), err) }
  }
  return err
}

func (p *AnsRandomJoinRoomWithServerOption) Equals(other *AnsRandomJoinRoomWithServerOption) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if !p.Result_.Equals(other.Result_) { return false }
  if p.CategoryID != other.CategoryID { return false }
  if p.RoomID != other.RoomID { return false }
  if p.ContentsErrorCode != other.ContentsErrorCode {
    if p.ContentsErrorCode == nil || other.ContentsErrorCode == nil {
      return false
    }
    if (*p.ContentsErrorCode) != (*other.ContentsErrorCode) { return false }
  }
  return true
}

func (p *AnsRandomJoinRoomWithServerOption) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AnsRandomJoinRoomWithServerOption(%+v)", *p)
}

func (p *AnsRandomJoinRoomWithServerOption) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - Result_
//  - CategoryID
//  - RoomID
//  - ContentsErrorCode
type AnsRandomJoinRoom struct {
  RequestKey protocol.ClientRequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  Result_ *error.Error `thrift:"result,2,required" db:"result" json:"result"`
  CategoryID protocol.CategoryId `thrift:"category_id,3,required" db:"category_id" json:"category_id"`
  RoomID protocol.RoomId `thrift:"room_id,4,required" db:"room_id" json:"room_id"`
  ContentsErrorCode *int32 `thrift:"contents_error_code,5" db:"contents_error_code" json:"contents_error_code,omitempty"`
}

func NewAnsRandomJoinRoom() *AnsRandomJoinRoom {
  return &AnsRandomJoinRoom{}
}


func (p *AnsRandomJoinRoom) GetRequestKey() protocol.ClientRequestKey {
  return p.RequestKey
}
var AnsRandomJoinRoom_Result__DEFAULT *error.Error
func (p *AnsRandomJoinRoom) GetResult_() *error.Error {
  if !p.IsSetResult_() {
    return AnsRandomJoinRoom_Result__DEFAULT
  }
return p.Result_
}

func (p *AnsRandomJoinRoom) GetCategoryID() protocol.CategoryId {
  return p.CategoryID
}

func (p *AnsRandomJoinRoom) GetRoomID() protocol.RoomId {
  return p.RoomID
}
var AnsRandomJoinRoom_ContentsErrorCode_DEFAULT int32
func (p *AnsRandomJoinRoom) GetContentsErrorCode() int32 {
  if !p.IsSetContentsErrorCode() {
    return AnsRandomJoinRoom_ContentsErrorCode_DEFAULT
  }
return *p.ContentsErrorCode
}
func (p *AnsRandomJoinRoom) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *AnsRandomJoinRoom) IsSetContentsErrorCode() bool {
  return p.ContentsErrorCode != nil
}

func (p *AnsRandomJoinRoom) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetResult_ bool = false;
  var issetCategoryID bool = false;
  var issetRoomID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetCategoryID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetRoomID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  if !issetCategoryID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CategoryID is not set"));
  }
  if !issetRoomID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomID is not set"));
  }
  return nil
}

func (p *AnsRandomJoinRoom)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.ClientRequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *AnsRandomJoinRoom)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &error.Error{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *AnsRandomJoinRoom)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := protocol.CategoryId(v)
  p.CategoryID = temp
}
  return nil
}

func (p *AnsRandomJoinRoom)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := protocol.RoomId(v)
  p.RoomID = temp
}
  return nil
}

func (p *AnsRandomJoinRoom)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ContentsErrorCode = &v
}
  return nil
}

func (p *AnsRandomJoinRoom) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AnsRandomJoinRoom"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnsRandomJoinRoom) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *AnsRandomJoinRoom) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:result: ", p), err) }
  return err
}

func (p *AnsRandomJoinRoom) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "category_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:category_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CategoryID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.category_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:category_id: ", p), err) }
  return err
}

func (p *AnsRandomJoinRoom) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "room_id", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:room_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RoomID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.room_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:room_id: ", p), err) }
  return err
}

func (p *AnsRandomJoinRoom) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetContentsErrorCode() {
    if err := oprot.WriteFieldBegin(ctx, "contents_error_code", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:contents_error_code: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.ContentsErrorCode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.contents_error_code (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:contents_error_code: ", p), err) }
  }
  return err
}

func (p *AnsRandomJoinRoom) Equals(other *AnsRandomJoinRoom) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if !p.Result_.Equals(other.Result_) { return false }
  if p.CategoryID != other.CategoryID { return false }
  if p.RoomID != other.RoomID { return false }
  if p.ContentsErrorCode != other.ContentsErrorCode {
    if p.ContentsErrorCode == nil || other.ContentsErrorCode == nil {
      return false
    }
    if (*p.ContentsErrorCode) != (*other.ContentsErrorCode) { return false }
  }
  return true
}

func (p *AnsRandomJoinRoom) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AnsRandomJoinRoom(%+v)", *p)
}

func (p *AnsRandomJoinRoom) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - Result_
type AnsLeaveRoom struct {
  RequestKey protocol.ClientRequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  Result_ *error.Error `thrift:"result,2,required" db:"result" json:"result"`
}

func NewAnsLeaveRoom() *AnsLeaveRoom {
  return &AnsLeaveRoom{}
}


func (p *AnsLeaveRoom) GetRequestKey() protocol.ClientRequestKey {
  return p.RequestKey
}
var AnsLeaveRoom_Result__DEFAULT *error.Error
func (p *AnsLeaveRoom) GetResult_() *error.Error {
  if !p.IsSetResult_() {
    return AnsLeaveRoom_Result__DEFAULT
  }
return p.Result_
}
func (p *AnsLeaveRoom) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *AnsLeaveRoom) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetResult_ bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  return nil
}

func (p *AnsLeaveRoom)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.ClientRequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *AnsLeaveRoom)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &error.Error{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *AnsLeaveRoom) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AnsLeaveRoom"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnsLeaveRoom) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *AnsLeaveRoom) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:result: ", p), err) }
  return err
}

func (p *AnsLeaveRoom) Equals(other *AnsLeaveRoom) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if !p.Result_.Equals(other.Result_) { return false }
  return true
}

func (p *AnsLeaveRoom) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AnsLeaveRoom(%+v)", *p)
}

func (p *AnsLeaveRoom) Validate() error {
  return nil
}
// Attributes:
//  - Reason
type NtfLeaveRoom struct {
  Reason protocol.RemoveUserReason `thrift:"reason,1,required" db:"reason" json:"reason"`
}

func NewNtfLeaveRoom() *NtfLeaveRoom {
  return &NtfLeaveRoom{}
}


func (p *NtfLeaveRoom) GetReason() protocol.RemoveUserReason {
  return p.Reason
}
func (p *NtfLeaveRoom) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetReason bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetReason = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetReason{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Reason is not set"));
  }
  return nil
}

func (p *NtfLeaveRoom)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.RemoveUserReason(v)
  p.Reason = temp
}
  return nil
}

func (p *NtfLeaveRoom) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "NtfLeaveRoom"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NtfLeaveRoom) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Reason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reason: ", p), err) }
  return err
}

func (p *NtfLeaveRoom) Equals(other *NtfLeaveRoom) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Reason != other.Reason { return false }
  return true
}

func (p *NtfLeaveRoom) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NtfLeaveRoom(%+v)", *p)
}

func (p *NtfLeaveRoom) Validate() error {
  return nil
}
// Attributes:
//  - Reason
type NtfLogout struct {
  Reason protocol.RemoveUserReason `thrift:"reason,1,required" db:"reason" json:"reason"`
}

func NewNtfLogout() *NtfLogout {
  return &NtfLogout{}
}


func (p *NtfLogout) GetReason() protocol.RemoveUserReason {
  return p.Reason
}
func (p *NtfLogout) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetReason bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetReason = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetReason{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Reason is not set"));
  }
  return nil
}

func (p *NtfLogout)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.RemoveUserReason(v)
  p.Reason = temp
}
  return nil
}

func (p *NtfLogout) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "NtfLogout"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NtfLogout) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reason: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Reason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reason: ", p), err) }
  return err
}

func (p *NtfLogout) Equals(other *NtfLogout) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Reason != other.Reason { return false }
  return true
}

func (p *NtfLogout) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NtfLogout(%+v)", *p)
}

func (p *NtfLogout) Validate() error {
  return nil
}
// Attributes:
//  - ServerType
//  - EnvelopedMessage
type ForwardMessage struct {
  ServerType protocol.ServerType `thrift:"server_type,1,required" db:"server_type" json:"server_type"`
  EnvelopedMessage protocol.KlpProtocolBuffer `thrift:"enveloped_message,2,required" db:"enveloped_message" json:"enveloped_message"`
}

func NewForwardMessage() *ForwardMessage {
  return &ForwardMessage{}
}


func (p *ForwardMessage) GetServerType() protocol.ServerType {
  return p.ServerType
}

func (p *ForwardMessage) GetEnvelopedMessage() protocol.KlpProtocolBuffer {
  return p.EnvelopedMessage
}
func (p *ForwardMessage) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetServerType bool = false;
  var issetEnvelopedMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetServerType = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetEnvelopedMessage = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetServerType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServerType is not set"));
  }
  if !issetEnvelopedMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field EnvelopedMessage is not set"));
  }
  return nil
}

func (p *ForwardMessage)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.ServerType(v)
  p.ServerType = temp
}
  return nil
}

func (p *ForwardMessage)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := protocol.KlpProtocolBuffer(v)
  p.EnvelopedMessage = temp
}
  return nil
}

func (p *ForwardMessage) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ForwardMessage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ForwardMessage) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "server_type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:server_type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ServerType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.server_type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:server_type: ", p), err) }
  return err
}

func (p *ForwardMessage) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "enveloped_message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:enveloped_message: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.EnvelopedMessage); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enveloped_message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:enveloped_message: ", p), err) }
  return err
}

func (p *ForwardMessage) Equals(other *ForwardMessage) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ServerType != other.ServerType { return false }
  if bytes.Compare(p.EnvelopedMessage, other.EnvelopedMessage) != 0 { return false }
  return true
}

func (p *ForwardMessage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ForwardMessage(%+v)", *p)
}

func (p *ForwardMessage) Validate() error {
  return nil
}
// Attributes:
//  - IsAttached
//  - UserLocation
//  - SessionInfo
type NtfLoginComplete struct {
  IsAttached bool `thrift:"is_attached,1,required" db:"is_attached" json:"is_attached"`
  UserLocation *protocol.UserLocation `thrift:"user_location,2,required" db:"user_location" json:"user_location"`
  SessionInfo protocol.Buffer `thrift:"session_info,3,required" db:"session_info" json:"session_info"`
}

func NewNtfLoginComplete() *NtfLoginComplete {
  return &NtfLoginComplete{}
}


func (p *NtfLoginComplete) GetIsAttached() bool {
  return p.IsAttached
}
var NtfLoginComplete_UserLocation_DEFAULT *protocol.UserLocation
func (p *NtfLoginComplete) GetUserLocation() *protocol.UserLocation {
  if !p.IsSetUserLocation() {
    return NtfLoginComplete_UserLocation_DEFAULT
  }
return p.UserLocation
}

func (p *NtfLoginComplete) GetSessionInfo() protocol.Buffer {
  return p.SessionInfo
}
func (p *NtfLoginComplete) IsSetUserLocation() bool {
  return p.UserLocation != nil
}

func (p *NtfLoginComplete) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetIsAttached bool = false;
  var issetUserLocation bool = false;
  var issetSessionInfo bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetIsAttached = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetUserLocation = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetSessionInfo = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetIsAttached{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IsAttached is not set"));
  }
  if !issetUserLocation{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserLocation is not set"));
  }
  if !issetSessionInfo{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SessionInfo is not set"));
  }
  return nil
}

func (p *NtfLoginComplete)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IsAttached = v
}
  return nil
}

func (p *NtfLoginComplete)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.UserLocation = &protocol.UserLocation{}
  if err := p.UserLocation.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserLocation), err)
  }
  return nil
}

func (p *NtfLoginComplete)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := protocol.Buffer(v)
  p.SessionInfo = temp
}
  return nil
}

func (p *NtfLoginComplete) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "NtfLoginComplete"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NtfLoginComplete) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "is_attached", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:is_attached: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsAttached)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.is_attached (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:is_attached: ", p), err) }
  return err
}

func (p *NtfLoginComplete) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_location", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user_location: ", p), err) }
  if err := p.UserLocation.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserLocation), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user_location: ", p), err) }
  return err
}

func (p *NtfLoginComplete) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "session_info", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:session_info: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.SessionInfo); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.session_info (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:session_info: ", p), err) }
  return err
}

func (p *NtfLoginComplete) Equals(other *NtfLoginComplete) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.IsAttached != other.IsAttached { return false }
  if !p.UserLocation.Equals(other.UserLocation) { return false }
  if bytes.Compare(p.SessionInfo, other.SessionInfo) != 0 { return false }
  return true
}

func (p *NtfLoginComplete) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NtfLoginComplete(%+v)", *p)
}

func (p *NtfLoginComplete) Validate() error {
  return nil
}
// Attributes:
//  - NoticeMessage
type NtfNotice struct {
  NoticeMessage string `thrift:"notice_message,1,required" db:"notice_message" json:"notice_message"`
}

func NewNtfNotice() *NtfNotice {
  return &NtfNotice{}
}


func (p *NtfNotice) GetNoticeMessage() string {
  return p.NoticeMessage
}
func (p *NtfNotice) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNoticeMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetNoticeMessage = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNoticeMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NoticeMessage is not set"));
  }
  return nil
}

func (p *NtfNotice)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NoticeMessage = v
}
  return nil
}

func (p *NtfNotice) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "NtfNotice"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NtfNotice) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "notice_message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:notice_message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NoticeMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notice_message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:notice_message: ", p), err) }
  return err
}

func (p *NtfNotice) Equals(other *NtfNotice) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.NoticeMessage != other.NoticeMessage { return false }
  return true
}

func (p *NtfNotice) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NtfNotice(%+v)", *p)
}

func (p *NtfNotice) Validate() error {
  return nil
}
// Attributes:
//  - Contents
type NtfClientNetLibConfig struct {
  Contents string `thrift:"contents,1,required" db:"contents" json:"contents"`
}

func NewNtfClientNetLibConfig() *NtfClientNetLibConfig {
  return &NtfClientNetLibConfig{}
}


func (p *NtfClientNetLibConfig) GetContents() string {
  return p.Contents
}
func (p *NtfClientNetLibConfig) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetContents bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetContents = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetContents{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Contents is not set"));
  }
  return nil
}

func (p *NtfClientNetLibConfig)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Contents = v
}
  return nil
}

func (p *NtfClientNetLibConfig) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "NtfClientNetLibConfig"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NtfClientNetLibConfig) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contents", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:contents: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Contents)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contents (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:contents: ", p), err) }
  return err
}

func (p *NtfClientNetLibConfig) Equals(other *NtfClientNetLibConfig) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Contents != other.Contents { return false }
  return true
}

func (p *NtfClientNetLibConfig) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NtfClientNetLibConfig(%+v)", *p)
}

func (p *NtfClientNetLibConfig) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - TimeStamp
type Pong struct {
  RequestKey protocol.ClientRequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  TimeStamp int64 `thrift:"time_stamp,2,required" db:"time_stamp" json:"time_stamp"`
}

func NewPong() *Pong {
  return &Pong{}
}


func (p *Pong) GetRequestKey() protocol.ClientRequestKey {
  return p.RequestKey
}

func (p *Pong) GetTimeStamp() int64 {
  return p.TimeStamp
}
func (p *Pong) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetTimeStamp bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetTimeStamp = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetTimeStamp{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TimeStamp is not set"));
  }
  return nil
}

func (p *Pong)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.ClientRequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *Pong)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TimeStamp = v
}
  return nil
}

func (p *Pong) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Pong"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Pong) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *Pong) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "time_stamp", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:time_stamp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TimeStamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.time_stamp (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:time_stamp: ", p), err) }
  return err
}

func (p *Pong) Equals(other *Pong) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if p.TimeStamp != other.TimeStamp { return false }
  return true
}

func (p *Pong) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Pong(%+v)", *p)
}

func (p *Pong) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - Result_
//  - RoomList
type AnsRoomList struct {
  RequestKey protocol.ClientRequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  Result_ *error.Error `thrift:"result,2,required" db:"result" json:"result"`
  RoomList []*protocol.RoomListInfo `thrift:"room_list,3,required" db:"room_list" json:"room_list"`
}

func NewAnsRoomList() *AnsRoomList {
  return &AnsRoomList{}
}


func (p *AnsRoomList) GetRequestKey() protocol.ClientRequestKey {
  return p.RequestKey
}
var AnsRoomList_Result__DEFAULT *error.Error
func (p *AnsRoomList) GetResult_() *error.Error {
  if !p.IsSetResult_() {
    return AnsRoomList_Result__DEFAULT
  }
return p.Result_
}

func (p *AnsRoomList) GetRoomList() []*protocol.RoomListInfo {
  return p.RoomList
}
func (p *AnsRoomList) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *AnsRoomList) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetResult_ bool = false;
  var issetRoomList bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetRoomList = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  if !issetRoomList{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomList is not set"));
  }
  return nil
}

func (p *AnsRoomList)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.ClientRequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *AnsRoomList)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &error.Error{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *AnsRoomList)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*protocol.RoomListInfo, 0, size)
  p.RoomList =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &protocol.RoomListInfo{}
    if err := _elem0.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.RoomList = append(p.RoomList, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AnsRoomList) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AnsRoomList"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnsRoomList) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *AnsRoomList) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:result: ", p), err) }
  return err
}

func (p *AnsRoomList) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "room_list", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:room_list: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.RoomList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RoomList {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:room_list: ", p), err) }
  return err
}

func (p *AnsRoomList) Equals(other *AnsRoomList) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if !p.Result_.Equals(other.Result_) { return false }
  if len(p.RoomList) != len(other.RoomList) { return false }
  for i, _tgt := range p.RoomList {
    _src1 := other.RoomList[i]
    if !_tgt.Equals(_src1) { return false }
  }
  return true
}

func (p *AnsRoomList) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AnsRoomList(%+v)", *p)
}

func (p *AnsRoomList) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - Result_
//  - UserCount
type AnsChangeLobby struct {
  RequestKey protocol.ClientRequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  Result_ *error.Error `thrift:"result,2,required" db:"result" json:"result"`
  UserCount int32 `thrift:"user_count,3,required" db:"user_count" json:"user_count"`
}

func NewAnsChangeLobby() *AnsChangeLobby {
  return &AnsChangeLobby{}
}


func (p *AnsChangeLobby) GetRequestKey() protocol.ClientRequestKey {
  return p.RequestKey
}
var AnsChangeLobby_Result__DEFAULT *error.Error
func (p *AnsChangeLobby) GetResult_() *error.Error {
  if !p.IsSetResult_() {
    return AnsChangeLobby_Result__DEFAULT
  }
return p.Result_
}

func (p *AnsChangeLobby) GetUserCount() int32 {
  return p.UserCount
}
func (p *AnsChangeLobby) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *AnsChangeLobby) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetResult_ bool = false;
  var issetUserCount bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetUserCount = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  if !issetUserCount{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserCount is not set"));
  }
  return nil
}

func (p *AnsChangeLobby)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.ClientRequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *AnsChangeLobby)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &error.Error{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *AnsChangeLobby)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.UserCount = v
}
  return nil
}

func (p *AnsChangeLobby) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AnsChangeLobby"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnsChangeLobby) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *AnsChangeLobby) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:result: ", p), err) }
  return err
}

func (p *AnsChangeLobby) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:user_count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.UserCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:user_count: ", p), err) }
  return err
}

func (p *AnsChangeLobby) Equals(other *AnsChangeLobby) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if !p.Result_.Equals(other.Result_) { return false }
  if p.UserCount != other.UserCount { return false }
  return true
}

func (p *AnsChangeLobby) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AnsChangeLobby(%+v)", *p)
}

func (p *AnsChangeLobby) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - Result_
//  - CategoryID
//  - TnmtSrl
//  - State
//  - RoomID
//  - ContentsErrorCode
type AnsJoinTnmt struct {
  RequestKey protocol.ClientRequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  Result_ *error.Error `thrift:"result,2,required" db:"result" json:"result"`
  CategoryID protocol.CategoryId `thrift:"category_id,3,required" db:"category_id" json:"category_id"`
  TnmtSrl protocol.TnmtSrl `thrift:"tnmt_srl,4,required" db:"tnmt_srl" json:"tnmt_srl"`
  State protocol.TnmtUserState `thrift:"state,5,required" db:"state" json:"state"`
  RoomID protocol.RoomId `thrift:"room_id,6,required" db:"room_id" json:"room_id"`
  ContentsErrorCode int32 `thrift:"contents_error_code,7,required" db:"contents_error_code" json:"contents_error_code"`
}

func NewAnsJoinTnmt() *AnsJoinTnmt {
  return &AnsJoinTnmt{}
}


func (p *AnsJoinTnmt) GetRequestKey() protocol.ClientRequestKey {
  return p.RequestKey
}
var AnsJoinTnmt_Result__DEFAULT *error.Error
func (p *AnsJoinTnmt) GetResult_() *error.Error {
  if !p.IsSetResult_() {
    return AnsJoinTnmt_Result__DEFAULT
  }
return p.Result_
}

func (p *AnsJoinTnmt) GetCategoryID() protocol.CategoryId {
  return p.CategoryID
}

func (p *AnsJoinTnmt) GetTnmtSrl() protocol.TnmtSrl {
  return p.TnmtSrl
}

func (p *AnsJoinTnmt) GetState() protocol.TnmtUserState {
  return p.State
}

func (p *AnsJoinTnmt) GetRoomID() protocol.RoomId {
  return p.RoomID
}

func (p *AnsJoinTnmt) GetContentsErrorCode() int32 {
  return p.ContentsErrorCode
}
func (p *AnsJoinTnmt) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *AnsJoinTnmt) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetResult_ bool = false;
  var issetCategoryID bool = false;
  var issetTnmtSrl bool = false;
  var issetState bool = false;
  var issetRoomID bool = false;
  var issetContentsErrorCode bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetCategoryID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetTnmtSrl = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetState = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
        issetRoomID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
        issetContentsErrorCode = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  if !issetCategoryID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CategoryID is not set"));
  }
  if !issetTnmtSrl{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TnmtSrl is not set"));
  }
  if !issetState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field State is not set"));
  }
  if !issetRoomID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomID is not set"));
  }
  if !issetContentsErrorCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ContentsErrorCode is not set"));
  }
  return nil
}

func (p *AnsJoinTnmt)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.ClientRequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *AnsJoinTnmt)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &error.Error{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *AnsJoinTnmt)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := protocol.CategoryId(v)
  p.CategoryID = temp
}
  return nil
}

func (p *AnsJoinTnmt)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := protocol.TnmtSrl(v)
  p.TnmtSrl = temp
}
  return nil
}

func (p *AnsJoinTnmt)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := protocol.TnmtUserState(v)
  p.State = temp
}
  return nil
}

func (p *AnsJoinTnmt)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := protocol.RoomId(v)
  p.RoomID = temp
}
  return nil
}

func (p *AnsJoinTnmt)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ContentsErrorCode = v
}
  return nil
}

func (p *AnsJoinTnmt) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AnsJoinTnmt"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnsJoinTnmt) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *AnsJoinTnmt) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:result: ", p), err) }
  return err
}

func (p *AnsJoinTnmt) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "category_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:category_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CategoryID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.category_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:category_id: ", p), err) }
  return err
}

func (p *AnsJoinTnmt) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tnmt_srl", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tnmt_srl: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TnmtSrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tnmt_srl (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tnmt_srl: ", p), err) }
  return err
}

func (p *AnsJoinTnmt) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "state", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:state: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:state: ", p), err) }
  return err
}

func (p *AnsJoinTnmt) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "room_id", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:room_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RoomID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.room_id (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:room_id: ", p), err) }
  return err
}

func (p *AnsJoinTnmt) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contents_error_code", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:contents_error_code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ContentsErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contents_error_code (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:contents_error_code: ", p), err) }
  return err
}

func (p *AnsJoinTnmt) Equals(other *AnsJoinTnmt) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if !p.Result_.Equals(other.Result_) { return false }
  if p.CategoryID != other.CategoryID { return false }
  if p.TnmtSrl != other.TnmtSrl { return false }
  if p.State != other.State { return false }
  if p.RoomID != other.RoomID { return false }
  if p.ContentsErrorCode != other.ContentsErrorCode { return false }
  return true
}

func (p *AnsJoinTnmt) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AnsJoinTnmt(%+v)", *p)
}

func (p *AnsJoinTnmt) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - Result_
//  - State
//  - ContentsData
type AnsLeaveTnmt struct {
  RequestKey protocol.ClientRequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  Result_ *error.Error `thrift:"result,2,required" db:"result" json:"result"`
  State protocol.TnmtUserState `thrift:"state,3,required" db:"state" json:"state"`
  ContentsData protocol.Buffer `thrift:"contents_data,4,required" db:"contents_data" json:"contents_data"`
}

func NewAnsLeaveTnmt() *AnsLeaveTnmt {
  return &AnsLeaveTnmt{}
}


func (p *AnsLeaveTnmt) GetRequestKey() protocol.ClientRequestKey {
  return p.RequestKey
}
var AnsLeaveTnmt_Result__DEFAULT *error.Error
func (p *AnsLeaveTnmt) GetResult_() *error.Error {
  if !p.IsSetResult_() {
    return AnsLeaveTnmt_Result__DEFAULT
  }
return p.Result_
}

func (p *AnsLeaveTnmt) GetState() protocol.TnmtUserState {
  return p.State
}

func (p *AnsLeaveTnmt) GetContentsData() protocol.Buffer {
  return p.ContentsData
}
func (p *AnsLeaveTnmt) IsSetResult_() bool {
  return p.Result_ != nil
}

func (p *AnsLeaveTnmt) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetResult_ bool = false;
  var issetState bool = false;
  var issetContentsData bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetResult_ = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetState = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetContentsData = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetResult_{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Result_ is not set"));
  }
  if !issetState{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field State is not set"));
  }
  if !issetContentsData{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ContentsData is not set"));
  }
  return nil
}

func (p *AnsLeaveTnmt)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.ClientRequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *AnsLeaveTnmt)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Result_ = &error.Error{}
  if err := p.Result_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Result_), err)
  }
  return nil
}

func (p *AnsLeaveTnmt)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := protocol.TnmtUserState(v)
  p.State = temp
}
  return nil
}

func (p *AnsLeaveTnmt)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := protocol.Buffer(v)
  p.ContentsData = temp
}
  return nil
}

func (p *AnsLeaveTnmt) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AnsLeaveTnmt"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnsLeaveTnmt) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *AnsLeaveTnmt) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "result", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:result: ", p), err) }
  if err := p.Result_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Result_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:result: ", p), err) }
  return err
}

func (p *AnsLeaveTnmt) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "state", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:state: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:state: ", p), err) }
  return err
}

func (p *AnsLeaveTnmt) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "contents_data", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:contents_data: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.ContentsData); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contents_data (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:contents_data: ", p), err) }
  return err
}

func (p *AnsLeaveTnmt) Equals(other *AnsLeaveTnmt) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if !p.Result_.Equals(other.Result_) { return false }
  if p.State != other.State { return false }
  if bytes.Compare(p.ContentsData, other.ContentsData) != 0 { return false }
  return true
}

func (p *AnsLeaveTnmt) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AnsLeaveTnmt(%+v)", *p)
}

func (p *AnsLeaveTnmt) Validate() error {
  return nil
}
// Attributes:
//  - Type
//  - Ssn
//  - Gsn
//  - RoutingKey
//  - RoomID
//  - Body
type NtfKLPGWMessage struct {
  Type protocol.Buffer `thrift:"type,1,required" db:"type" json:"type"`
  Ssn protocol.Ssn `thrift:"ssn,2,required" db:"ssn" json:"ssn"`
  Gsn protocol.Gsn `thrift:"gsn,3,required" db:"gsn" json:"gsn"`
  RoutingKey protocol.Buffer `thrift:"routing_key,4,required" db:"routing_key" json:"routing_key"`
  RoomID protocol.RoomId `thrift:"room_id,5,required" db:"room_id" json:"room_id"`
  Body protocol.Buffer `thrift:"body,6,required" db:"body" json:"body"`
}

func NewNtfKLPGWMessage() *NtfKLPGWMessage {
  return &NtfKLPGWMessage{}
}


func (p *NtfKLPGWMessage) GetType() protocol.Buffer {
  return p.Type
}

func (p *NtfKLPGWMessage) GetSsn() protocol.Ssn {
  return p.Ssn
}

func (p *NtfKLPGWMessage) GetGsn() protocol.Gsn {
  return p.Gsn
}

func (p *NtfKLPGWMessage) GetRoutingKey() protocol.Buffer {
  return p.RoutingKey
}

func (p *NtfKLPGWMessage) GetRoomID() protocol.RoomId {
  return p.RoomID
}

func (p *NtfKLPGWMessage) GetBody() protocol.Buffer {
  return p.Body
}
func (p *NtfKLPGWMessage) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetType bool = false;
  var issetSsn bool = false;
  var issetGsn bool = false;
  var issetRoutingKey bool = false;
  var issetRoomID bool = false;
  var issetBody bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetType = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetSsn = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetGsn = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetRoutingKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetRoomID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
        issetBody = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  if !issetSsn{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ssn is not set"));
  }
  if !issetGsn{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Gsn is not set"));
  }
  if !issetRoutingKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoutingKey is not set"));
  }
  if !issetRoomID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomID is not set"));
  }
  if !issetBody{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Body is not set"));
  }
  return nil
}

func (p *NtfKLPGWMessage)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := protocol.Buffer(v)
  p.Type = temp
}
  return nil
}

func (p *NtfKLPGWMessage)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := protocol.Ssn(v)
  p.Ssn = temp
}
  return nil
}

func (p *NtfKLPGWMessage)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := protocol.Gsn(v)
  p.Gsn = temp
}
  return nil
}

func (p *NtfKLPGWMessage)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := protocol.Buffer(v)
  p.RoutingKey = temp
}
  return nil
}

func (p *NtfKLPGWMessage)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := protocol.RoomId(v)
  p.RoomID = temp
}
  return nil
}

func (p *NtfKLPGWMessage)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := protocol.Buffer(v)
  p.Body = temp
}
  return nil
}

func (p *NtfKLPGWMessage) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "NtfKLPGWMessage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NtfKLPGWMessage) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Type); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *NtfKLPGWMessage) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ssn", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ssn: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Ssn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ssn (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ssn: ", p), err) }
  return err
}

func (p *NtfKLPGWMessage) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "gsn", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gsn: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Gsn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gsn (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gsn: ", p), err) }
  return err
}

func (p *NtfKLPGWMessage) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "routing_key", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:routing_key: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.RoutingKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.routing_key (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:routing_key: ", p), err) }
  return err
}

func (p *NtfKLPGWMessage) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "room_id", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:room_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RoomID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.room_id (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:room_id: ", p), err) }
  return err
}

func (p *NtfKLPGWMessage) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "body", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:body: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Body); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.body (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:body: ", p), err) }
  return err
}

func (p *NtfKLPGWMessage) Equals(other *NtfKLPGWMessage) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if bytes.Compare(p.Type, other.Type) != 0 { return false }
  if p.Ssn != other.Ssn { return false }
  if p.Gsn != other.Gsn { return false }
  if bytes.Compare(p.RoutingKey, other.RoutingKey) != 0 { return false }
  if p.RoomID != other.RoomID { return false }
  if bytes.Compare(p.Body, other.Body) != 0 { return false }
  return true
}

func (p *NtfKLPGWMessage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NtfKLPGWMessage(%+v)", *p)
}

func (p *NtfKLPGWMessage) Validate() error {
  return nil
}
