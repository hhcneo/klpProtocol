// Code generated by Thrift Compiler (0.19.0). DO NOT EDIT.

package klp

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

type MessageType int64
const (
  MessageType_kReqTournamentLogic MessageType = 1
  MessageType_kReqTnmtRoomInfo MessageType = 2
  MessageType_kReqLeaveTnmt MessageType = 3
  MessageType_kNtfDeleteTnmtRoom MessageType = 4
  MessageType_kNtfUpdateCurrentRoomInfo MessageType = 5
  MessageType_kNtfTournamentLogic MessageType = 6
  MessageType_kNtfLeaveWaitTnmt MessageType = 7
)

func (p MessageType) String() string {
  switch p {
  case MessageType_kReqTournamentLogic: return "kReqTournamentLogic"
  case MessageType_kReqTnmtRoomInfo: return "kReqTnmtRoomInfo"
  case MessageType_kReqLeaveTnmt: return "kReqLeaveTnmt"
  case MessageType_kNtfDeleteTnmtRoom: return "kNtfDeleteTnmtRoom"
  case MessageType_kNtfUpdateCurrentRoomInfo: return "kNtfUpdateCurrentRoomInfo"
  case MessageType_kNtfTournamentLogic: return "kNtfTournamentLogic"
  case MessageType_kNtfLeaveWaitTnmt: return "kNtfLeaveWaitTnmt"
  }
  return "<UNSET>"
}

func MessageTypeFromString(s string) (MessageType, error) {
  switch s {
  case "kReqTournamentLogic": return MessageType_kReqTournamentLogic, nil 
  case "kReqTnmtRoomInfo": return MessageType_kReqTnmtRoomInfo, nil 
  case "kReqLeaveTnmt": return MessageType_kReqLeaveTnmt, nil 
  case "kNtfDeleteTnmtRoom": return MessageType_kNtfDeleteTnmtRoom, nil 
  case "kNtfUpdateCurrentRoomInfo": return MessageType_kNtfUpdateCurrentRoomInfo, nil 
  case "kNtfTournamentLogic": return MessageType_kNtfTournamentLogic, nil 
  case "kNtfLeaveWaitTnmt": return MessageType_kNtfLeaveWaitTnmt, nil 
  }
  return MessageType(0), fmt.Errorf("not a valid MessageType string")
}


func MessageTypePtr(v MessageType) *MessageType { return &v }

func (p MessageType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *MessageType) UnmarshalText(text []byte) error {
q, err := MessageTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *MessageType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = MessageType(v)
return nil
}

func (p * MessageType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - RequestKey
//  - Ssn
//  - CategoryID
//  - GameTypeID
//  - TnmtSrl
//  - RoomID
//  - Command
//  - Parameters
//  - TraceID
type ReqTournamentLogic struct {
  RequestKey RequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  Ssn Ssn `thrift:"ssn,2,required" db:"ssn" json:"ssn"`
  CategoryID CategoryId `thrift:"category_id,3,required" db:"category_id" json:"category_id"`
  GameTypeID GameTypeId `thrift:"game_type_id,4,required" db:"game_type_id" json:"game_type_id"`
  TnmtSrl TnmtSrl `thrift:"tnmt_srl,5,required" db:"tnmt_srl" json:"tnmt_srl"`
  RoomID RoomId `thrift:"room_id,6,required" db:"room_id" json:"room_id"`
  Command Buffer `thrift:"command,7,required" db:"command" json:"command"`
  Parameters Buffer `thrift:"parameters,8,required" db:"parameters" json:"parameters"`
  TraceID Buffer `thrift:"trace_id,9,required" db:"trace_id" json:"trace_id"`
}

func NewReqTournamentLogic() *ReqTournamentLogic {
  return &ReqTournamentLogic{}
}


func (p *ReqTournamentLogic) GetRequestKey() RequestKey {
  return p.RequestKey
}

func (p *ReqTournamentLogic) GetSsn() Ssn {
  return p.Ssn
}

func (p *ReqTournamentLogic) GetCategoryID() CategoryId {
  return p.CategoryID
}

func (p *ReqTournamentLogic) GetGameTypeID() GameTypeId {
  return p.GameTypeID
}

func (p *ReqTournamentLogic) GetTnmtSrl() TnmtSrl {
  return p.TnmtSrl
}

func (p *ReqTournamentLogic) GetRoomID() RoomId {
  return p.RoomID
}

func (p *ReqTournamentLogic) GetCommand() Buffer {
  return p.Command
}

func (p *ReqTournamentLogic) GetParameters() Buffer {
  return p.Parameters
}

func (p *ReqTournamentLogic) GetTraceID() Buffer {
  return p.TraceID
}
func (p *ReqTournamentLogic) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetSsn bool = false;
  var issetCategoryID bool = false;
  var issetGameTypeID bool = false;
  var issetTnmtSrl bool = false;
  var issetRoomID bool = false;
  var issetCommand bool = false;
  var issetParameters bool = false;
  var issetTraceID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetSsn = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetCategoryID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetGameTypeID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetTnmtSrl = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
        issetRoomID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
        issetCommand = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
        issetParameters = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
        issetTraceID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetSsn{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ssn is not set"));
  }
  if !issetCategoryID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CategoryID is not set"));
  }
  if !issetGameTypeID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GameTypeID is not set"));
  }
  if !issetTnmtSrl{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TnmtSrl is not set"));
  }
  if !issetRoomID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomID is not set"));
  }
  if !issetCommand{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Command is not set"));
  }
  if !issetParameters{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Parameters is not set"));
  }
  if !issetTraceID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TraceID is not set"));
  }
  return nil
}

func (p *ReqTournamentLogic)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := RequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *ReqTournamentLogic)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ssn(v)
  p.Ssn = temp
}
  return nil
}

func (p *ReqTournamentLogic)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := CategoryId(v)
  p.CategoryID = temp
}
  return nil
}

func (p *ReqTournamentLogic)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := GameTypeId(v)
  p.GameTypeID = temp
}
  return nil
}

func (p *ReqTournamentLogic)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := TnmtSrl(v)
  p.TnmtSrl = temp
}
  return nil
}

func (p *ReqTournamentLogic)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := RoomId(v)
  p.RoomID = temp
}
  return nil
}

func (p *ReqTournamentLogic)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := Buffer(v)
  p.Command = temp
}
  return nil
}

func (p *ReqTournamentLogic)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := Buffer(v)
  p.Parameters = temp
}
  return nil
}

func (p *ReqTournamentLogic)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  temp := Buffer(v)
  p.TraceID = temp
}
  return nil
}

func (p *ReqTournamentLogic) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReqTournamentLogic"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReqTournamentLogic) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *ReqTournamentLogic) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ssn", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ssn: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Ssn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ssn (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ssn: ", p), err) }
  return err
}

func (p *ReqTournamentLogic) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "category_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:category_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CategoryID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.category_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:category_id: ", p), err) }
  return err
}

func (p *ReqTournamentLogic) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "game_type_id", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:game_type_id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.GameTypeID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.game_type_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:game_type_id: ", p), err) }
  return err
}

func (p *ReqTournamentLogic) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tnmt_srl", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tnmt_srl: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TnmtSrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tnmt_srl (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tnmt_srl: ", p), err) }
  return err
}

func (p *ReqTournamentLogic) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "room_id", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:room_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RoomID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.room_id (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:room_id: ", p), err) }
  return err
}

func (p *ReqTournamentLogic) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "command", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:command: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Command); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.command (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:command: ", p), err) }
  return err
}

func (p *ReqTournamentLogic) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parameters", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:parameters: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Parameters); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.parameters (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:parameters: ", p), err) }
  return err
}

func (p *ReqTournamentLogic) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "trace_id", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:trace_id: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.TraceID); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trace_id (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:trace_id: ", p), err) }
  return err
}

func (p *ReqTournamentLogic) Equals(other *ReqTournamentLogic) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if p.Ssn != other.Ssn { return false }
  if p.CategoryID != other.CategoryID { return false }
  if p.GameTypeID != other.GameTypeID { return false }
  if p.TnmtSrl != other.TnmtSrl { return false }
  if p.RoomID != other.RoomID { return false }
  if bytes.Compare(p.Command, other.Command) != 0 { return false }
  if bytes.Compare(p.Parameters, other.Parameters) != 0 { return false }
  if bytes.Compare(p.TraceID, other.TraceID) != 0 { return false }
  return true
}

func (p *ReqTournamentLogic) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReqTournamentLogic(%+v)", *p)
}

func (p *ReqTournamentLogic) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - Ssn
//  - CategoryID
//  - TnmtSrl
//  - Gsn
//  - Hci
//  - StoreType
//  - UserInfo
//  - RoomOption
//  - ResetRoom
//  - LimitUserCount
//  - TraceID
type ReqTnmtRoomInfo struct {
  RequestKey RequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  Ssn Ssn `thrift:"ssn,2,required" db:"ssn" json:"ssn"`
  CategoryID CategoryId `thrift:"category_id,3,required" db:"category_id" json:"category_id"`
  TnmtSrl TnmtSrl `thrift:"tnmt_srl,4,required" db:"tnmt_srl" json:"tnmt_srl"`
  Gsn Gsn `thrift:"gsn,5,required" db:"gsn" json:"gsn"`
  Hci string `thrift:"hci,6,required" db:"hci" json:"hci"`
  StoreType string `thrift:"store_type,7,required" db:"store_type" json:"store_type"`
  UserInfo Buffer `thrift:"user_info,8,required" db:"user_info" json:"user_info"`
  RoomOption Buffer `thrift:"room_option,9,required" db:"room_option" json:"room_option"`
  ResetRoom bool `thrift:"reset_room,10,required" db:"reset_room" json:"reset_room"`
  LimitUserCount int32 `thrift:"limit_user_count,11,required" db:"limit_user_count" json:"limit_user_count"`
  TraceID Buffer `thrift:"trace_id,12,required" db:"trace_id" json:"trace_id"`
}

func NewReqTnmtRoomInfo() *ReqTnmtRoomInfo {
  return &ReqTnmtRoomInfo{}
}


func (p *ReqTnmtRoomInfo) GetRequestKey() RequestKey {
  return p.RequestKey
}

func (p *ReqTnmtRoomInfo) GetSsn() Ssn {
  return p.Ssn
}

func (p *ReqTnmtRoomInfo) GetCategoryID() CategoryId {
  return p.CategoryID
}

func (p *ReqTnmtRoomInfo) GetTnmtSrl() TnmtSrl {
  return p.TnmtSrl
}

func (p *ReqTnmtRoomInfo) GetGsn() Gsn {
  return p.Gsn
}

func (p *ReqTnmtRoomInfo) GetHci() string {
  return p.Hci
}

func (p *ReqTnmtRoomInfo) GetStoreType() string {
  return p.StoreType
}

func (p *ReqTnmtRoomInfo) GetUserInfo() Buffer {
  return p.UserInfo
}

func (p *ReqTnmtRoomInfo) GetRoomOption() Buffer {
  return p.RoomOption
}

func (p *ReqTnmtRoomInfo) GetResetRoom() bool {
  return p.ResetRoom
}

func (p *ReqTnmtRoomInfo) GetLimitUserCount() int32 {
  return p.LimitUserCount
}

func (p *ReqTnmtRoomInfo) GetTraceID() Buffer {
  return p.TraceID
}
func (p *ReqTnmtRoomInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetSsn bool = false;
  var issetCategoryID bool = false;
  var issetTnmtSrl bool = false;
  var issetGsn bool = false;
  var issetHci bool = false;
  var issetStoreType bool = false;
  var issetUserInfo bool = false;
  var issetRoomOption bool = false;
  var issetResetRoom bool = false;
  var issetLimitUserCount bool = false;
  var issetTraceID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetSsn = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetCategoryID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetTnmtSrl = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetGsn = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
        issetHci = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
        issetStoreType = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
        issetUserInfo = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
        issetRoomOption = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
        issetResetRoom = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
        issetLimitUserCount = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
        issetTraceID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetSsn{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ssn is not set"));
  }
  if !issetCategoryID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CategoryID is not set"));
  }
  if !issetTnmtSrl{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TnmtSrl is not set"));
  }
  if !issetGsn{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Gsn is not set"));
  }
  if !issetHci{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Hci is not set"));
  }
  if !issetStoreType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StoreType is not set"));
  }
  if !issetUserInfo{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field UserInfo is not set"));
  }
  if !issetRoomOption{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomOption is not set"));
  }
  if !issetResetRoom{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ResetRoom is not set"));
  }
  if !issetLimitUserCount{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LimitUserCount is not set"));
  }
  if !issetTraceID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TraceID is not set"));
  }
  return nil
}

func (p *ReqTnmtRoomInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := RequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *ReqTnmtRoomInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ssn(v)
  p.Ssn = temp
}
  return nil
}

func (p *ReqTnmtRoomInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := CategoryId(v)
  p.CategoryID = temp
}
  return nil
}

func (p *ReqTnmtRoomInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := TnmtSrl(v)
  p.TnmtSrl = temp
}
  return nil
}

func (p *ReqTnmtRoomInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := Gsn(v)
  p.Gsn = temp
}
  return nil
}

func (p *ReqTnmtRoomInfo)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Hci = v
}
  return nil
}

func (p *ReqTnmtRoomInfo)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.StoreType = v
}
  return nil
}

func (p *ReqTnmtRoomInfo)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := Buffer(v)
  p.UserInfo = temp
}
  return nil
}

func (p *ReqTnmtRoomInfo)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  temp := Buffer(v)
  p.RoomOption = temp
}
  return nil
}

func (p *ReqTnmtRoomInfo)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.ResetRoom = v
}
  return nil
}

func (p *ReqTnmtRoomInfo)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.LimitUserCount = v
}
  return nil
}

func (p *ReqTnmtRoomInfo)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  temp := Buffer(v)
  p.TraceID = temp
}
  return nil
}

func (p *ReqTnmtRoomInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReqTnmtRoomInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReqTnmtRoomInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *ReqTnmtRoomInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ssn", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ssn: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Ssn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ssn (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ssn: ", p), err) }
  return err
}

func (p *ReqTnmtRoomInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "category_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:category_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CategoryID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.category_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:category_id: ", p), err) }
  return err
}

func (p *ReqTnmtRoomInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tnmt_srl", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tnmt_srl: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TnmtSrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tnmt_srl (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tnmt_srl: ", p), err) }
  return err
}

func (p *ReqTnmtRoomInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "gsn", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:gsn: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Gsn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gsn (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:gsn: ", p), err) }
  return err
}

func (p *ReqTnmtRoomInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hci", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:hci: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Hci)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hci (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:hci: ", p), err) }
  return err
}

func (p *ReqTnmtRoomInfo) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "store_type", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:store_type: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.StoreType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.store_type (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:store_type: ", p), err) }
  return err
}

func (p *ReqTnmtRoomInfo) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "user_info", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:user_info: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.UserInfo); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user_info (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:user_info: ", p), err) }
  return err
}

func (p *ReqTnmtRoomInfo) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "room_option", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:room_option: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.RoomOption); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.room_option (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:room_option: ", p), err) }
  return err
}

func (p *ReqTnmtRoomInfo) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reset_room", thrift.BOOL, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:reset_room: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.ResetRoom)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reset_room (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:reset_room: ", p), err) }
  return err
}

func (p *ReqTnmtRoomInfo) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "limit_user_count", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:limit_user_count: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.LimitUserCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.limit_user_count (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:limit_user_count: ", p), err) }
  return err
}

func (p *ReqTnmtRoomInfo) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "trace_id", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:trace_id: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.TraceID); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trace_id (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:trace_id: ", p), err) }
  return err
}

func (p *ReqTnmtRoomInfo) Equals(other *ReqTnmtRoomInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if p.Ssn != other.Ssn { return false }
  if p.CategoryID != other.CategoryID { return false }
  if p.TnmtSrl != other.TnmtSrl { return false }
  if p.Gsn != other.Gsn { return false }
  if p.Hci != other.Hci { return false }
  if p.StoreType != other.StoreType { return false }
  if bytes.Compare(p.UserInfo, other.UserInfo) != 0 { return false }
  if bytes.Compare(p.RoomOption, other.RoomOption) != 0 { return false }
  if p.ResetRoom != other.ResetRoom { return false }
  if p.LimitUserCount != other.LimitUserCount { return false }
  if bytes.Compare(p.TraceID, other.TraceID) != 0 { return false }
  return true
}

func (p *ReqTnmtRoomInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReqTnmtRoomInfo(%+v)", *p)
}

func (p *ReqTnmtRoomInfo) Validate() error {
  return nil
}
// Attributes:
//  - RequestKey
//  - Ssn
//  - CategoryID
//  - TnmtSrl
//  - Gsn
//  - Exit
//  - ResetLocation
//  - TraceID
type ReqLeaveTnmt struct {
  RequestKey RequestKey `thrift:"request_key,1,required" db:"request_key" json:"request_key"`
  Ssn Ssn `thrift:"ssn,2,required" db:"ssn" json:"ssn"`
  CategoryID CategoryId `thrift:"category_id,3,required" db:"category_id" json:"category_id"`
  TnmtSrl TnmtSrl `thrift:"tnmt_srl,4,required" db:"tnmt_srl" json:"tnmt_srl"`
  Gsn Gsn `thrift:"gsn,5,required" db:"gsn" json:"gsn"`
  Exit bool `thrift:"exit,6,required" db:"exit" json:"exit"`
  ResetLocation bool `thrift:"reset_location,7,required" db:"reset_location" json:"reset_location"`
  TraceID Buffer `thrift:"trace_id,8,required" db:"trace_id" json:"trace_id"`
}

func NewReqLeaveTnmt() *ReqLeaveTnmt {
  return &ReqLeaveTnmt{}
}


func (p *ReqLeaveTnmt) GetRequestKey() RequestKey {
  return p.RequestKey
}

func (p *ReqLeaveTnmt) GetSsn() Ssn {
  return p.Ssn
}

func (p *ReqLeaveTnmt) GetCategoryID() CategoryId {
  return p.CategoryID
}

func (p *ReqLeaveTnmt) GetTnmtSrl() TnmtSrl {
  return p.TnmtSrl
}

func (p *ReqLeaveTnmt) GetGsn() Gsn {
  return p.Gsn
}

func (p *ReqLeaveTnmt) GetExit() bool {
  return p.Exit
}

func (p *ReqLeaveTnmt) GetResetLocation() bool {
  return p.ResetLocation
}

func (p *ReqLeaveTnmt) GetTraceID() Buffer {
  return p.TraceID
}
func (p *ReqLeaveTnmt) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequestKey bool = false;
  var issetSsn bool = false;
  var issetCategoryID bool = false;
  var issetTnmtSrl bool = false;
  var issetGsn bool = false;
  var issetExit bool = false;
  var issetResetLocation bool = false;
  var issetTraceID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetRequestKey = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetSsn = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetCategoryID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetTnmtSrl = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetGsn = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
        issetExit = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
        issetResetLocation = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
        issetTraceID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequestKey{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequestKey is not set"));
  }
  if !issetSsn{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ssn is not set"));
  }
  if !issetCategoryID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CategoryID is not set"));
  }
  if !issetTnmtSrl{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TnmtSrl is not set"));
  }
  if !issetGsn{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Gsn is not set"));
  }
  if !issetExit{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Exit is not set"));
  }
  if !issetResetLocation{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ResetLocation is not set"));
  }
  if !issetTraceID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TraceID is not set"));
  }
  return nil
}

func (p *ReqLeaveTnmt)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := RequestKey(v)
  p.RequestKey = temp
}
  return nil
}

func (p *ReqLeaveTnmt)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Ssn(v)
  p.Ssn = temp
}
  return nil
}

func (p *ReqLeaveTnmt)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := CategoryId(v)
  p.CategoryID = temp
}
  return nil
}

func (p *ReqLeaveTnmt)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := TnmtSrl(v)
  p.TnmtSrl = temp
}
  return nil
}

func (p *ReqLeaveTnmt)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := Gsn(v)
  p.Gsn = temp
}
  return nil
}

func (p *ReqLeaveTnmt)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Exit = v
}
  return nil
}

func (p *ReqLeaveTnmt)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ResetLocation = v
}
  return nil
}

func (p *ReqLeaveTnmt)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := Buffer(v)
  p.TraceID = temp
}
  return nil
}

func (p *ReqLeaveTnmt) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReqLeaveTnmt"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReqLeaveTnmt) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request_key", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request_key: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RequestKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.request_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request_key: ", p), err) }
  return err
}

func (p *ReqLeaveTnmt) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ssn", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ssn: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Ssn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ssn (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ssn: ", p), err) }
  return err
}

func (p *ReqLeaveTnmt) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "category_id", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:category_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CategoryID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.category_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:category_id: ", p), err) }
  return err
}

func (p *ReqLeaveTnmt) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tnmt_srl", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tnmt_srl: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TnmtSrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tnmt_srl (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tnmt_srl: ", p), err) }
  return err
}

func (p *ReqLeaveTnmt) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "gsn", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:gsn: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Gsn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gsn (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:gsn: ", p), err) }
  return err
}

func (p *ReqLeaveTnmt) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "exit", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:exit: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Exit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.exit (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:exit: ", p), err) }
  return err
}

func (p *ReqLeaveTnmt) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reset_location", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:reset_location: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.ResetLocation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reset_location (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:reset_location: ", p), err) }
  return err
}

func (p *ReqLeaveTnmt) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "trace_id", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:trace_id: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.TraceID); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trace_id (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:trace_id: ", p), err) }
  return err
}

func (p *ReqLeaveTnmt) Equals(other *ReqLeaveTnmt) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RequestKey != other.RequestKey { return false }
  if p.Ssn != other.Ssn { return false }
  if p.CategoryID != other.CategoryID { return false }
  if p.TnmtSrl != other.TnmtSrl { return false }
  if p.Gsn != other.Gsn { return false }
  if p.Exit != other.Exit { return false }
  if p.ResetLocation != other.ResetLocation { return false }
  if bytes.Compare(p.TraceID, other.TraceID) != 0 { return false }
  return true
}

func (p *ReqLeaveTnmt) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReqLeaveTnmt(%+v)", *p)
}

func (p *ReqLeaveTnmt) Validate() error {
  return nil
}
// Attributes:
//  - Ssn
//  - CategoryID
//  - TnmtSrl
//  - RoomID
//  - TraceID
type NtfDeleteTnmtRoom struct {
  Ssn Ssn `thrift:"ssn,1,required" db:"ssn" json:"ssn"`
  CategoryID CategoryId `thrift:"category_id,2,required" db:"category_id" json:"category_id"`
  TnmtSrl TnmtSrl `thrift:"tnmt_srl,3,required" db:"tnmt_srl" json:"tnmt_srl"`
  RoomID RoomId `thrift:"room_id,4,required" db:"room_id" json:"room_id"`
  TraceID Buffer `thrift:"trace_id,5,required" db:"trace_id" json:"trace_id"`
}

func NewNtfDeleteTnmtRoom() *NtfDeleteTnmtRoom {
  return &NtfDeleteTnmtRoom{}
}


func (p *NtfDeleteTnmtRoom) GetSsn() Ssn {
  return p.Ssn
}

func (p *NtfDeleteTnmtRoom) GetCategoryID() CategoryId {
  return p.CategoryID
}

func (p *NtfDeleteTnmtRoom) GetTnmtSrl() TnmtSrl {
  return p.TnmtSrl
}

func (p *NtfDeleteTnmtRoom) GetRoomID() RoomId {
  return p.RoomID
}

func (p *NtfDeleteTnmtRoom) GetTraceID() Buffer {
  return p.TraceID
}
func (p *NtfDeleteTnmtRoom) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetSsn bool = false;
  var issetCategoryID bool = false;
  var issetTnmtSrl bool = false;
  var issetRoomID bool = false;
  var issetTraceID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetSsn = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetCategoryID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetTnmtSrl = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetRoomID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetTraceID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetSsn{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ssn is not set"));
  }
  if !issetCategoryID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CategoryID is not set"));
  }
  if !issetTnmtSrl{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TnmtSrl is not set"));
  }
  if !issetRoomID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomID is not set"));
  }
  if !issetTraceID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TraceID is not set"));
  }
  return nil
}

func (p *NtfDeleteTnmtRoom)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ssn(v)
  p.Ssn = temp
}
  return nil
}

func (p *NtfDeleteTnmtRoom)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := CategoryId(v)
  p.CategoryID = temp
}
  return nil
}

func (p *NtfDeleteTnmtRoom)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TnmtSrl(v)
  p.TnmtSrl = temp
}
  return nil
}

func (p *NtfDeleteTnmtRoom)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := RoomId(v)
  p.RoomID = temp
}
  return nil
}

func (p *NtfDeleteTnmtRoom)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := Buffer(v)
  p.TraceID = temp
}
  return nil
}

func (p *NtfDeleteTnmtRoom) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "NtfDeleteTnmtRoom"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NtfDeleteTnmtRoom) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ssn", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ssn: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Ssn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ssn (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ssn: ", p), err) }
  return err
}

func (p *NtfDeleteTnmtRoom) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "category_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:category_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CategoryID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.category_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:category_id: ", p), err) }
  return err
}

func (p *NtfDeleteTnmtRoom) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tnmt_srl", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tnmt_srl: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TnmtSrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tnmt_srl (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tnmt_srl: ", p), err) }
  return err
}

func (p *NtfDeleteTnmtRoom) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "room_id", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:room_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RoomID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.room_id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:room_id: ", p), err) }
  return err
}

func (p *NtfDeleteTnmtRoom) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "trace_id", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:trace_id: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.TraceID); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trace_id (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:trace_id: ", p), err) }
  return err
}

func (p *NtfDeleteTnmtRoom) Equals(other *NtfDeleteTnmtRoom) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Ssn != other.Ssn { return false }
  if p.CategoryID != other.CategoryID { return false }
  if p.TnmtSrl != other.TnmtSrl { return false }
  if p.RoomID != other.RoomID { return false }
  if bytes.Compare(p.TraceID, other.TraceID) != 0 { return false }
  return true
}

func (p *NtfDeleteTnmtRoom) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NtfDeleteTnmtRoom(%+v)", *p)
}

func (p *NtfDeleteTnmtRoom) Validate() error {
  return nil
}
// Attributes:
//  - Ssn
//  - CategoryID
//  - TnmtSrl
//  - Gsns
//  - Location
//  - TraceID
type NtfUpdateCurrentRoomInfo struct {
  Ssn Ssn `thrift:"ssn,1,required" db:"ssn" json:"ssn"`
  CategoryID CategoryId `thrift:"category_id,2,required" db:"category_id" json:"category_id"`
  TnmtSrl TnmtSrl `thrift:"tnmt_srl,3,required" db:"tnmt_srl" json:"tnmt_srl"`
  Gsns []Gsn `thrift:"gsns,4,required" db:"gsns" json:"gsns"`
  Location *RoomLocation `thrift:"location,5,required" db:"location" json:"location"`
  TraceID Buffer `thrift:"trace_id,6,required" db:"trace_id" json:"trace_id"`
}

func NewNtfUpdateCurrentRoomInfo() *NtfUpdateCurrentRoomInfo {
  return &NtfUpdateCurrentRoomInfo{}
}


func (p *NtfUpdateCurrentRoomInfo) GetSsn() Ssn {
  return p.Ssn
}

func (p *NtfUpdateCurrentRoomInfo) GetCategoryID() CategoryId {
  return p.CategoryID
}

func (p *NtfUpdateCurrentRoomInfo) GetTnmtSrl() TnmtSrl {
  return p.TnmtSrl
}

func (p *NtfUpdateCurrentRoomInfo) GetGsns() []Gsn {
  return p.Gsns
}
var NtfUpdateCurrentRoomInfo_Location_DEFAULT *RoomLocation
func (p *NtfUpdateCurrentRoomInfo) GetLocation() *RoomLocation {
  if !p.IsSetLocation() {
    return NtfUpdateCurrentRoomInfo_Location_DEFAULT
  }
return p.Location
}

func (p *NtfUpdateCurrentRoomInfo) GetTraceID() Buffer {
  return p.TraceID
}
func (p *NtfUpdateCurrentRoomInfo) IsSetLocation() bool {
  return p.Location != nil
}

func (p *NtfUpdateCurrentRoomInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetSsn bool = false;
  var issetCategoryID bool = false;
  var issetTnmtSrl bool = false;
  var issetGsns bool = false;
  var issetLocation bool = false;
  var issetTraceID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetSsn = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetCategoryID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetTnmtSrl = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetGsns = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetLocation = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
        issetTraceID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetSsn{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ssn is not set"));
  }
  if !issetCategoryID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CategoryID is not set"));
  }
  if !issetTnmtSrl{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TnmtSrl is not set"));
  }
  if !issetGsns{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Gsns is not set"));
  }
  if !issetLocation{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Location is not set"));
  }
  if !issetTraceID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TraceID is not set"));
  }
  return nil
}

func (p *NtfUpdateCurrentRoomInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ssn(v)
  p.Ssn = temp
}
  return nil
}

func (p *NtfUpdateCurrentRoomInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := CategoryId(v)
  p.CategoryID = temp
}
  return nil
}

func (p *NtfUpdateCurrentRoomInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TnmtSrl(v)
  p.TnmtSrl = temp
}
  return nil
}

func (p *NtfUpdateCurrentRoomInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]Gsn, 0, size)
  p.Gsns =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 Gsn
    if v, err := iprot.ReadI64(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := Gsn(v)
    _elem0 = temp
}
    p.Gsns = append(p.Gsns, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *NtfUpdateCurrentRoomInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.Location = &RoomLocation{}
  if err := p.Location.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Location), err)
  }
  return nil
}

func (p *NtfUpdateCurrentRoomInfo)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := Buffer(v)
  p.TraceID = temp
}
  return nil
}

func (p *NtfUpdateCurrentRoomInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "NtfUpdateCurrentRoomInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NtfUpdateCurrentRoomInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ssn", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ssn: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Ssn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ssn (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ssn: ", p), err) }
  return err
}

func (p *NtfUpdateCurrentRoomInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "category_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:category_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CategoryID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.category_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:category_id: ", p), err) }
  return err
}

func (p *NtfUpdateCurrentRoomInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tnmt_srl", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tnmt_srl: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TnmtSrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tnmt_srl (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tnmt_srl: ", p), err) }
  return err
}

func (p *NtfUpdateCurrentRoomInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "gsns", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:gsns: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I64, len(p.Gsns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Gsns {
    if err := oprot.WriteI64(ctx, int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:gsns: ", p), err) }
  return err
}

func (p *NtfUpdateCurrentRoomInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "location", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:location: ", p), err) }
  if err := p.Location.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Location), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:location: ", p), err) }
  return err
}

func (p *NtfUpdateCurrentRoomInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "trace_id", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:trace_id: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.TraceID); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trace_id (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:trace_id: ", p), err) }
  return err
}

func (p *NtfUpdateCurrentRoomInfo) Equals(other *NtfUpdateCurrentRoomInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Ssn != other.Ssn { return false }
  if p.CategoryID != other.CategoryID { return false }
  if p.TnmtSrl != other.TnmtSrl { return false }
  if len(p.Gsns) != len(other.Gsns) { return false }
  for i, _tgt := range p.Gsns {
    _src1 := other.Gsns[i]
    if _tgt != _src1 { return false }
  }
  if !p.Location.Equals(other.Location) { return false }
  if bytes.Compare(p.TraceID, other.TraceID) != 0 { return false }
  return true
}

func (p *NtfUpdateCurrentRoomInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NtfUpdateCurrentRoomInfo(%+v)", *p)
}

func (p *NtfUpdateCurrentRoomInfo) Validate() error {
  return nil
}
// Attributes:
//  - Ssn
//  - CategoryID
//  - GameTypeID
//  - TnmtSrl
//  - RoomID
//  - Command
//  - Parameters
//  - TraceID
type NtfTournamentLogic struct {
  Ssn Ssn `thrift:"ssn,1,required" db:"ssn" json:"ssn"`
  CategoryID CategoryId `thrift:"category_id,2,required" db:"category_id" json:"category_id"`
  GameTypeID GameTypeId `thrift:"game_type_id,3,required" db:"game_type_id" json:"game_type_id"`
  TnmtSrl TnmtSrl `thrift:"tnmt_srl,4,required" db:"tnmt_srl" json:"tnmt_srl"`
  RoomID RoomId `thrift:"room_id,5,required" db:"room_id" json:"room_id"`
  Command Buffer `thrift:"command,6,required" db:"command" json:"command"`
  Parameters Buffer `thrift:"parameters,7,required" db:"parameters" json:"parameters"`
  TraceID Buffer `thrift:"trace_id,8,required" db:"trace_id" json:"trace_id"`
}

func NewNtfTournamentLogic() *NtfTournamentLogic {
  return &NtfTournamentLogic{}
}


func (p *NtfTournamentLogic) GetSsn() Ssn {
  return p.Ssn
}

func (p *NtfTournamentLogic) GetCategoryID() CategoryId {
  return p.CategoryID
}

func (p *NtfTournamentLogic) GetGameTypeID() GameTypeId {
  return p.GameTypeID
}

func (p *NtfTournamentLogic) GetTnmtSrl() TnmtSrl {
  return p.TnmtSrl
}

func (p *NtfTournamentLogic) GetRoomID() RoomId {
  return p.RoomID
}

func (p *NtfTournamentLogic) GetCommand() Buffer {
  return p.Command
}

func (p *NtfTournamentLogic) GetParameters() Buffer {
  return p.Parameters
}

func (p *NtfTournamentLogic) GetTraceID() Buffer {
  return p.TraceID
}
func (p *NtfTournamentLogic) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetSsn bool = false;
  var issetCategoryID bool = false;
  var issetGameTypeID bool = false;
  var issetTnmtSrl bool = false;
  var issetRoomID bool = false;
  var issetCommand bool = false;
  var issetParameters bool = false;
  var issetTraceID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetSsn = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetCategoryID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetGameTypeID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetTnmtSrl = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetRoomID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
        issetCommand = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
        issetParameters = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
        issetTraceID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetSsn{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ssn is not set"));
  }
  if !issetCategoryID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CategoryID is not set"));
  }
  if !issetGameTypeID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GameTypeID is not set"));
  }
  if !issetTnmtSrl{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TnmtSrl is not set"));
  }
  if !issetRoomID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RoomID is not set"));
  }
  if !issetCommand{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Command is not set"));
  }
  if !issetParameters{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Parameters is not set"));
  }
  if !issetTraceID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TraceID is not set"));
  }
  return nil
}

func (p *NtfTournamentLogic)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ssn(v)
  p.Ssn = temp
}
  return nil
}

func (p *NtfTournamentLogic)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := CategoryId(v)
  p.CategoryID = temp
}
  return nil
}

func (p *NtfTournamentLogic)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := GameTypeId(v)
  p.GameTypeID = temp
}
  return nil
}

func (p *NtfTournamentLogic)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := TnmtSrl(v)
  p.TnmtSrl = temp
}
  return nil
}

func (p *NtfTournamentLogic)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := RoomId(v)
  p.RoomID = temp
}
  return nil
}

func (p *NtfTournamentLogic)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := Buffer(v)
  p.Command = temp
}
  return nil
}

func (p *NtfTournamentLogic)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := Buffer(v)
  p.Parameters = temp
}
  return nil
}

func (p *NtfTournamentLogic)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := Buffer(v)
  p.TraceID = temp
}
  return nil
}

func (p *NtfTournamentLogic) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "NtfTournamentLogic"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NtfTournamentLogic) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ssn", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ssn: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Ssn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ssn (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ssn: ", p), err) }
  return err
}

func (p *NtfTournamentLogic) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "category_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:category_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CategoryID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.category_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:category_id: ", p), err) }
  return err
}

func (p *NtfTournamentLogic) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "game_type_id", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:game_type_id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.GameTypeID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.game_type_id (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:game_type_id: ", p), err) }
  return err
}

func (p *NtfTournamentLogic) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tnmt_srl", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tnmt_srl: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TnmtSrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tnmt_srl (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tnmt_srl: ", p), err) }
  return err
}

func (p *NtfTournamentLogic) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "room_id", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:room_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.RoomID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.room_id (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:room_id: ", p), err) }
  return err
}

func (p *NtfTournamentLogic) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "command", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:command: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Command); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.command (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:command: ", p), err) }
  return err
}

func (p *NtfTournamentLogic) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parameters", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:parameters: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Parameters); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.parameters (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:parameters: ", p), err) }
  return err
}

func (p *NtfTournamentLogic) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "trace_id", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:trace_id: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.TraceID); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trace_id (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:trace_id: ", p), err) }
  return err
}

func (p *NtfTournamentLogic) Equals(other *NtfTournamentLogic) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Ssn != other.Ssn { return false }
  if p.CategoryID != other.CategoryID { return false }
  if p.GameTypeID != other.GameTypeID { return false }
  if p.TnmtSrl != other.TnmtSrl { return false }
  if p.RoomID != other.RoomID { return false }
  if bytes.Compare(p.Command, other.Command) != 0 { return false }
  if bytes.Compare(p.Parameters, other.Parameters) != 0 { return false }
  if bytes.Compare(p.TraceID, other.TraceID) != 0 { return false }
  return true
}

func (p *NtfTournamentLogic) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NtfTournamentLogic(%+v)", *p)
}

func (p *NtfTournamentLogic) Validate() error {
  return nil
}
// Attributes:
//  - Ssn
//  - CategoryID
//  - TnmtSrl
//  - Gsn
//  - TraceID
type NtfLeaveWaitTnmt struct {
  Ssn Ssn `thrift:"ssn,1,required" db:"ssn" json:"ssn"`
  CategoryID CategoryId `thrift:"category_id,2,required" db:"category_id" json:"category_id"`
  TnmtSrl TnmtSrl `thrift:"tnmt_srl,3,required" db:"tnmt_srl" json:"tnmt_srl"`
  Gsn Gsn `thrift:"gsn,4,required" db:"gsn" json:"gsn"`
  TraceID Buffer `thrift:"trace_id,5,required" db:"trace_id" json:"trace_id"`
}

func NewNtfLeaveWaitTnmt() *NtfLeaveWaitTnmt {
  return &NtfLeaveWaitTnmt{}
}


func (p *NtfLeaveWaitTnmt) GetSsn() Ssn {
  return p.Ssn
}

func (p *NtfLeaveWaitTnmt) GetCategoryID() CategoryId {
  return p.CategoryID
}

func (p *NtfLeaveWaitTnmt) GetTnmtSrl() TnmtSrl {
  return p.TnmtSrl
}

func (p *NtfLeaveWaitTnmt) GetGsn() Gsn {
  return p.Gsn
}

func (p *NtfLeaveWaitTnmt) GetTraceID() Buffer {
  return p.TraceID
}
func (p *NtfLeaveWaitTnmt) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetSsn bool = false;
  var issetCategoryID bool = false;
  var issetTnmtSrl bool = false;
  var issetGsn bool = false;
  var issetTraceID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetSsn = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetCategoryID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetTnmtSrl = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetGsn = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetTraceID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetSsn{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Ssn is not set"));
  }
  if !issetCategoryID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CategoryID is not set"));
  }
  if !issetTnmtSrl{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TnmtSrl is not set"));
  }
  if !issetGsn{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Gsn is not set"));
  }
  if !issetTraceID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TraceID is not set"));
  }
  return nil
}

func (p *NtfLeaveWaitTnmt)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Ssn(v)
  p.Ssn = temp
}
  return nil
}

func (p *NtfLeaveWaitTnmt)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := CategoryId(v)
  p.CategoryID = temp
}
  return nil
}

func (p *NtfLeaveWaitTnmt)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TnmtSrl(v)
  p.TnmtSrl = temp
}
  return nil
}

func (p *NtfLeaveWaitTnmt)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Gsn(v)
  p.Gsn = temp
}
  return nil
}

func (p *NtfLeaveWaitTnmt)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := Buffer(v)
  p.TraceID = temp
}
  return nil
}

func (p *NtfLeaveWaitTnmt) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "NtfLeaveWaitTnmt"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NtfLeaveWaitTnmt) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ssn", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ssn: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Ssn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ssn (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ssn: ", p), err) }
  return err
}

func (p *NtfLeaveWaitTnmt) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "category_id", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:category_id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CategoryID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.category_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:category_id: ", p), err) }
  return err
}

func (p *NtfLeaveWaitTnmt) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tnmt_srl", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tnmt_srl: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TnmtSrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tnmt_srl (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tnmt_srl: ", p), err) }
  return err
}

func (p *NtfLeaveWaitTnmt) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "gsn", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:gsn: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Gsn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gsn (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:gsn: ", p), err) }
  return err
}

func (p *NtfLeaveWaitTnmt) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "trace_id", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:trace_id: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.TraceID); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trace_id (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:trace_id: ", p), err) }
  return err
}

func (p *NtfLeaveWaitTnmt) Equals(other *NtfLeaveWaitTnmt) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Ssn != other.Ssn { return false }
  if p.CategoryID != other.CategoryID { return false }
  if p.TnmtSrl != other.TnmtSrl { return false }
  if p.Gsn != other.Gsn { return false }
  if bytes.Compare(p.TraceID, other.TraceID) != 0 { return false }
  return true
}

func (p *NtfLeaveWaitTnmt) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NtfLeaveWaitTnmt(%+v)", *p)
}

func (p *NtfLeaveWaitTnmt) Validate() error {
  return nil
}
